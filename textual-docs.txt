TITLE: Running a Simple Textual App in Python
DESCRIPTION: This example demonstrates how to create an instance of a Textual app and run it. It includes a conditional statement to ensure the app only runs when the script is executed directly.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
from textual.app import App

class SimpleApp(App):
    pass

if __name__ == "__main__":
    app = SimpleApp()
    app.run()
```

----------------------------------------

TITLE: Targeting Child Widgets by State (Textual CSS)
DESCRIPTION: Illustrates how to combine a CSS class selector (`.started`) with an ID selector (`#start`) to target a specific child widget (the start button) only when its parent has the specified class. This rule hides the start button when the stopwatch is in the 'started' state.
SOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#_snippet_8

LANGUAGE: css
CODE:
```
.started #start {
    display: none
}
```

----------------------------------------

TITLE: Basic Event Handler Definition in Textual
DESCRIPTION: Shows how to define an event handler using the @on decorator to respond to a button press event. The method will be called when the button is pressed.
SOURCE: https://github.com/textualize/textual/blob/main/docs/api/on.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
@on(Button.Pressed)
def on_button_pressed(self) -> None:
    ...

```

----------------------------------------

TITLE: Setting Widget Dimensions with Different Scalar Units in CSS
DESCRIPTION: CSS example showing how to set width and height of a Horizontal widget using different scalar units. The width is set to 60 cells (absolute) and the height is set to 1fr (proportional).
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/scalar.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
Horizontal {
    width: 60;     /* 60 cells */
    height: 1fr;   /* proportional size of 1 */
}
```

----------------------------------------

TITLE: Creating a Widget with an ID
DESCRIPTION: This Python code creates a `Button` widget and assigns it the ID "next". The ID can be used to target the widget with a CSS selector.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_7

LANGUAGE: python
CODE:
```
yield Button(id="next")
```

----------------------------------------

TITLE: Running the AI Chat TUI Application in Python
DESCRIPTION: Creates an instance of the MotherApp and runs it, starting the AI chat TUI application.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/anatomy-of-a-textual-user-interface.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
if __name__ == "__main__":
    app = MotherApp()
    app.run()
```

----------------------------------------

TITLE: Centering Text within a Widget using Text-Align in Python
DESCRIPTION: This snippet shows how to center-align text within a Static widget using the 'text-align' rule. It also demonstrates setting a fixed width to the widget to force text wrapping.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/center-things.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static

LONG_TEXT = """This is a much longer piece of text that will wrap onto multiple lines. We use this to demonstrate how text alignment works."""

class CenterApp(App):
    def compose(self) -> ComposeResult:
        yield Static(LONG_TEXT)

    CSS = """
    Screen {
        align: center middle;
    }

    Static {
        width: 30;
        background: blue;
        border: solid white;
        text-align: center;
    }
    """

if __name__ == "__main__":
    app = CenterApp()
    app.run()
```

----------------------------------------

TITLE: CSS Rule for Success Class
DESCRIPTION: This CSS rule targets widgets with the class 'success' and sets their background to green and text color to white.  The dot (`.`) prefix indicates a class selector.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_11

LANGUAGE: css
CODE:
```
.success {
  background: green;
  color: white;
}
```

----------------------------------------

TITLE: Static Widget with Default CSS in Textual (Python)
DESCRIPTION: This code defines a custom widget named `Hello` that extends the `Static` widget class and includes embedded default CSS. The CSS is defined as a `DEFAULT_CSS` class variable and styles the widget's appearance.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_5

LANGUAGE: Python
CODE:
```
class Hello(Static):
    
```

----------------------------------------

TITLE: Composing Widgets in a Textual App
DESCRIPTION: This example shows how to add widgets to a Textual app using the compose method. It imports and yields a Welcome widget, and handles a button press event to exit the app.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
from textual.app import App
from textual.widgets import Welcome

class WelcomeApp(App):
    def compose(self):
        yield Welcome()

    def on_button_pressed(self) -> None:
        self.exit()

if __name__ == "__main__":
    app = WelcomeApp()
    app.run()
```

----------------------------------------

TITLE: Handling Button Events and Toggling CSS Classes (Python)
DESCRIPTION: Implements an `on_button_pressed` event handler in Textual to respond to button clicks. It demonstrates how to add or remove the "started" CSS class on a widget using `add_class()` and `remove_class()` methods to dynamically change its appearance based on user interaction.
SOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#_snippet_9

LANGUAGE: python
CODE:
```
# stopwatch04.py

from textual.app import App, ComposeResult
from textual.containers import Container
from textual.widgets import Button, Header, Footer, Static

class Stopwatch(Static):
    """A stopwatch widget."""

    def compose(self) -> ComposeResult:
        """Create child widgets for the stopwatch."""
        yield Static("00:00:00.00", id="time")
        with Container(id="buttons"):
            yield Button("Start", id="start", variant="success")
            yield Button("Stop", id="stop", variant="error")
            yield Button("Reset", id="reset")

    def on_button_pressed(self, event: Button.Pressed) -> None:
        """Called when a button is pressed."""
        button_id = event.button.id
        if button_id == "start":
            self.add_class("started")
        elif button_id == "stop":
            self.remove_class("started")


class StopwatchApp(App):
    """Textual app for the Stopwatch."""

    CSS_PATH = "stopwatch04.tcss"

    def compose(self) -> ComposeResult:
        """Create child widgets for the app."""
        yield Header()
        yield Footer()
        yield Container(
            Stopwatch(),
            Stopwatch(),
            Stopwatch(),
            id="stopwatches",
        )


if __name__ == "__main__":
    app = StopwatchApp()
    app.run()

```

----------------------------------------

TITLE: Defining a Simple Textual App Class in Python
DESCRIPTION: This snippet shows the simplest possible Textual app class definition. It imports the App class from Textual and creates a subclass with no additional functionality.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
from textual.app import App

class SimpleApp(App):
    pass
```

----------------------------------------

TITLE: Creating Reactive Attributes in Textual
DESCRIPTION: This code demonstrates how to create reactive attributes in a Textual widget using the `reactive` function. It shows examples of creating string, integer, and boolean reactive attributes with default values.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_0

LANGUAGE: Python
CODE:
```
from textual.reactive import reactive
from textual.widget import Widget

class Reactive(Widget):

    name = reactive("Paul")  # (1)!
    count = reactive(0) # (2)!
    is_cool = reactive(True)  # (3)!
```

----------------------------------------

TITLE: Combining Layout Techniques in a Textual App (Python)
DESCRIPTION: Python code for a Textual application showcasing the combination of multiple layout techniques. The specific techniques (e.g., containers, grids, docking, layers, offsets) are implemented structurally here and detailed visually via the associated CSS file ('combining_layouts.tcss'). Dependencies: Textual library.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_15

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/layout/combining_layouts.py"
```

----------------------------------------

TITLE: Calculator Example in Textual
DESCRIPTION: This example demonstrates a calculator application built with Textual, showcasing its ability to create interactive terminal applications. It includes both the Python code for the application logic and the CSS for styling.
SOURCE: https://github.com/textualize/textual/blob/main/docs/index.md#_snippet_1

LANGUAGE: Python
CODE:
```
--8<-- "examples/calculator.py"
```

----------------------------------------

TITLE: ByteEditor: Handling Input Changes and Updating BitSwitches (byte03.py)
DESCRIPTION: This code snippet demonstrates how to update the switches if the user edits the decimal value. Since the switches are children of `ByteEditor` they can be updated by setting their attributes directly. This is an example of attributes down. When the user edits the input, the Input widget sends a `Changed` event, which is handled with `on_input_changed` by setting `self.value`, which is a reactive value added to `ByteEditor`. If the value has changed, Textual will call `watch_value` which sets the value of each of the eight switches.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_30

LANGUAGE: python
CODE:
```
class BitSwitch(Widget):
    
```

----------------------------------------

TITLE: Testing RGB Color Change App
DESCRIPTION: Sample test implementation demonstrating how to test a Textual app that changes background colors based on button clicks and key presses. Uses pytest and pytest-asyncio for async testing capabilities.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/testing.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
async def test_keys():
    app = RGBApp()
    async with app.run_test() as pilot:
        await pilot.press("r")
        assert app.query_one("Screen").styles.background == "red"
        await pilot.press("g")
        assert app.query_one("Screen").styles.background == "green"
        await pilot.press("b")
        assert app.query_one("Screen").styles.background == "blue"

async def test_buttons():
    app = RGBApp()
    async with app.run_test() as pilot:
        await pilot.click("#red")
        assert app.query_one("Screen").styles.background == "red"
        await pilot.click("#green")
        assert app.query_one("Screen").styles.background == "green"
        await pilot.click("#blue")
        assert app.query_one("Screen").styles.background == "blue"
```

----------------------------------------

TITLE: Centering a Single Widget in Textual using CSS `align` (Python)
DESCRIPTION: This Python snippet demonstrates how to center a single `Button` widget horizontally and vertically within a Textual `Screen`. It achieves centering by applying the `align: center middle;` CSS property directly to the `Screen` container in the `CSS` class attribute. The `compose` method yields the `Button` as a child of the `Screen`.
SOURCE: https://github.com/textualize/textual/blob/main/questions/align-center-middle.question.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Button

class ButtonApp(App):

    CSS = """
    Screen {
        align: center middle;
    }
    """

    def compose(self) -> ComposeResult:
        yield Button("PUSH ME!")

if __name__ == "__main__":
    ButtonApp().run()
```

----------------------------------------

TITLE: Smart Refresh Example with Reactive Attributes
DESCRIPTION: This example demonstrates how modifying a reactive attribute triggers an automatic refresh of the widget. The `Name` widget has a reactive `who` attribute, and changes to this attribute cause the widget to re-render.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_3

LANGUAGE: Python
CODE:
```
from textual.app import App, ComposeResult
from textual.reactive import reactive
from textual.widgets import Header, Footer, Input, Static

class Name(Static):

    who = reactive("World")

    def render(self) -> str:
        return f"Hello, {self.who}!"

class RefreshApp(App):

    CSS_PATH = "refresh01.tcss"
    BINDINGS = [("d", "toggle_dark", "Toggle dark mode")]

    def compose(self) -> ComposeResult:
        yield Header()
        yield Footer()
        yield Name()
        yield Input(placeholder="Enter your name")

    def on_input_submitted(self, event: Input.Submitted) -> None:
        name = self.query_one(Name)
        name.who = event.value or "World"
```

----------------------------------------

TITLE: Querying a Single Widget by Type in Python
DESCRIPTION: Shows how to use query_one to find a widget of a specific type without using a selector.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
my_button = self.query_one(Button)
```

----------------------------------------

TITLE: Event Handler with Sender Filter in Textual
DESCRIPTION: Shows how to create an event handler that only responds to events from a specific widget by using the '#id' selector syntax in the decorator.
SOURCE: https://github.com/textualize/textual/blob/main/docs/api/on.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
@on(Button.Pressed, "#submit-button")
def on_submit_button_pressed(self) -> None:
    self.submit_form()

```

----------------------------------------

TITLE: Defining a CSS Variable
DESCRIPTION: This CSS defines a variable named `$border` and assigns it the value 'wide green'. Variables in Textual CSS are prefixed with `$` and can be used to store reusable styling values.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_20

LANGUAGE: css
CODE:
```
$border: wide green;
```

----------------------------------------

TITLE: Awaiting Widget Mount in a Textual App
DESCRIPTION: This example shows how to await the mounting of a widget before modifying it. It mounts a Welcome widget and changes its button label after ensuring the mount is complete.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
from textual.app import App
from textual.widgets import Button, Welcome

class WelcomeApp(App):
    async def on_key(self) -> None:
        await self.mount(Welcome())
        self.query_one(Button).label = "YES!"

if __name__ == "__main__":
    app = WelcomeApp()
    app.run()
```

----------------------------------------

TITLE: Defining Custom Message in Python for Textual
DESCRIPTION: This code snippet demonstrates how to create a custom message class within a widget for Textual applications. It includes a ColorButton widget that sends a custom Selected message when clicked.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
class ColorButton(Button):
    class Selected(Message):
        def __init__(self, color: Color) -> None:
            self.color = color
            super().__init__()

    def __init__(self, color: Color) -> None:
        super().__init__(color.name)
        self.color = color

    def on_click(self) -> None:
        self.post_message(self.Selected(self.color))
```

----------------------------------------

TITLE: Implementing Concurrent Weather Updates - Python
DESCRIPTION: Enhanced version using run_worker to handle network requests concurrently, improving UI responsiveness.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/workers.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/workers/weather02.py"
```

----------------------------------------

TITLE: Styling Widgets with Textual CSS
DESCRIPTION: Defines styles for the `Stopwatch`, `TimeDisplay`, and `Button` widgets using Textual CSS. It covers properties like background, height, margin, padding, text alignment, color, width, docking, and display visibility, and shows how to target widgets by their ID using `#`.
SOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#_snippet_6

LANGUAGE: CSS
CODE:
```
Stopwatch {
    background: $boost;
    height: 5;
    margin: 1;
    min-width: 50;
    padding: 1;
}

TimeDisplay { 
    text-align: center;
    color: $foreground-muted;
    height: 3;
}

Button {
    width: 16;
}

#start {
    dock: left;
}

#stop {
    dock: left;
    display: none;
}

#reset {
    dock: right;
}
```

----------------------------------------

TITLE: Creating Basic Screen with Blue Screen of Death Example
DESCRIPTION: Demonstrates creating a basic screen class that simulates Windows' blue screen of death, including key bindings and screen switching.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/screens/screen01.py"
```

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/screens/screen01.tcss"
```

----------------------------------------

TITLE: Pride Example in Textual
DESCRIPTION: This example demonstrates the 'pride.py' application built with the Textual framework. It showcases how to create visually appealing terminal applications using Textual's Python API.
SOURCE: https://github.com/textualize/textual/blob/main/docs/index.md#_snippet_0

LANGUAGE: Python
CODE:
```
--8<-- "examples/pride.py"
```

----------------------------------------

TITLE: Mounting Widgets in Textual Framework - Python
DESCRIPTION: Examples demonstrating the updated mount method functionality in Textual 0.4.0, including mounting widgets at specific positions using 'before' and 'after' parameters. Shows three different mounting approaches: at the start of a container, after a CSS selector match, and after a specific widget instance.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-4-0.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
# Mount at the start
self.mount(Button(id="Buy Coffee"), before=0)

# Mount after a selector
self.mount(Static("Password is incorrect"), after="Dialog Input.-error")

# Mount after a specific widget
tweet = self.query_one("Tweet")
self.mount(Static("Consider switching to Mastodon"), after=tweet)
```

----------------------------------------

TITLE: Handling Button Presses with Textual (Python)
DESCRIPTION: This method serves as the event handler for button press events in the Textual application. It determines which button was pressed based on its ID, retrieves the associated `TimeDisplay` widget, and invokes the corresponding action (`start`, `stop`, or `reset`). It also manages a CSS class ('started') on the parent widget to visually indicate the stopwatch's state.
SOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#_snippet_11

LANGUAGE: Python
CODE:
```
    def on_button_pressed(self, event: Button.Pressed) -> None:
        """Event handler called when a button is pressed."""
        button_id = event.button.id
        time_display = self.query_one(TimeDisplay)
        if button_id == "start":
            time_display.start()
            self.add_class("started")
        elif button_id == "stop":
            time_display.stop()
            self.remove_class("started")
        elif button_id == "reset":
            time_display.reset()
```

----------------------------------------

TITLE: Styling a Widget with a Type Selector
DESCRIPTION: This CSS code styles all `Alert` widgets with a solid red border. The type selector matches the name of the Python class.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_5

LANGUAGE: css
CODE:
```
Alert {
  border: solid red;
}
```

----------------------------------------

TITLE: Setting Layout Style in Python
DESCRIPTION: Shows how to programmatically set the layout style of a widget in Python. This example sets the layout to horizontal.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layout.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.layout = "horizontal"
```

----------------------------------------

TITLE: Switching Tabs Programmatically with the active Attribute (Textual, Python)
DESCRIPTION: Explains how to programmatically switch the active tab by setting the 'active' reactive attribute of the TabbedContent widget. Requires that TabPane widgets have unique 'id' values, and uses self.query_one(TabbedContent) to reference the widget. Input is the target tab ID (here, 'jessica'), and the output is a UI update that makes that tab visible.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tabbed_content.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
# Switch to Jessica tab
self.query_one(TabbedContent).active = "jessica"
```

----------------------------------------

TITLE: Styling Grid Layout with Column-span in Textual CSS
DESCRIPTION: Provides a CSS example for styling a grid layout in Textual, highlighting the lines where column-span is applied to various elements.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/column_span.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/column_span.tcss"
```

----------------------------------------

TITLE: Grid Column CSS Examples
DESCRIPTION: CSS examples showing how to set fixed width columns and fractional width columns in a grid layout.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_columns.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
/* Set all columns to have 50% width */
grid-columns: 50%;

/* Every other column is twice as wide as the first one */
grid-columns: 1fr 2fr;
```

----------------------------------------

TITLE: Custom Widget with CSS Styling in Textual (Python)
DESCRIPTION: This code defines a Textual app that includes a custom widget (`Hello`) and applies CSS styling to it. The CSS targets the `Hello` widget and sets its background color to green.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_1

LANGUAGE: Python
CODE:
```
class Hello(Widget):
    
```

----------------------------------------

TITLE: Setting Basic Padding in Textual
DESCRIPTION: Demonstrates how to set uniform padding around a widget's content using an integer value.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/styles/padding01.py"
```

----------------------------------------

TITLE: Implementing Grid Layout with Column-span in Python
DESCRIPTION: Shows a Python script that creates a 4x4 grid layout using Textual, demonstrating the use of column-span for various placeholders.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/column_span.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/column_span.py"
```

----------------------------------------

TITLE: Masked Input Example
DESCRIPTION: This example demonstrates how to use the MaskedInput widget to create a credit card input field with validation and styling. It defines a template mask for a credit card number, which requires 16 digits in groups of 4. The example also shows how to apply custom styling for valid and invalid states.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/masked_input.md#_snippet_0

LANGUAGE: Python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Header, Footer, MaskedInput
from textual.containers import Vertical
from textual.css.query import DOMQuery


class MaskedInputApp(App):
    CSS_PATH = "masked_input.tcss"

    def compose(self) -> ComposeResult:
        yield Header()
        with Vertical(id="body"):
            yield MaskedInput(
                template="9999-9999-9999-9999",
                placeholder="Credit card number",
                id="credit-card",
            )
        yield Footer()

    def on_mount(self) -> None:
        self.query_one("#credit-card").focus()


if __name__ == "__main__":
    app = MaskedInputApp()
    app.run()
```

----------------------------------------

TITLE: Creating a Clock App with Textual in Python
DESCRIPTION: This code snippet demonstrates how to create a simple clock application using Textual. It shows the current time and updates every second. The app uses the Digits widget to display the time and leverages Textual's CSS-like styling capabilities.
SOURCE: https://github.com/textualize/textual/blob/main/README.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
"""\nAn App to show the current time.\n"""\n\nfrom datetime import datetime\n\nfrom textual.app import App, ComposeResult\nfrom textual.widgets import Digits\n\n\nclass ClockApp(App):\n    CSS = """\n    Screen { align: center middle; }\n    Digits { width: auto; }\n    """\n\n    def compose(self) -> ComposeResult:\n        yield Digits("")\n\n    def on_ready(self) -> None:\n        self.update_clock()\n        self.set_interval(1, self.update_clock)\n\n    def update_clock(self) -> None:\n        clock = datetime.now().time()\n        self.query_one(Digits).update(f"{clock:%T}")\n\n\nif __name__ == "__main__":\n    app = ClockApp()\n    app.run()
```

----------------------------------------

TITLE: Implementing Reactive Attributes in Textual Python
DESCRIPTION: This snippet demonstrates adding reactive attributes (`start_time`, `time`) to a Textual widget (`TimeDisplay`). It shows how to initialize them, use `set_interval` in `on_mount` to periodically update a reactive attribute (`time`), and implement a `watch_time` method that automatically updates the widget's display whenever the `time` attribute changes.
SOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#_snippet_10

LANGUAGE: python
CODE:
```
from textual.reactive import reactive
from textual.widget import Widget
from time import monotonic

class TimeDisplay(Widget):
    """A widget to display elapsed time."""

    start_time = reactive(monotonic)
    time = reactive(0.0)

    def on_mount(self) -> None:
        """Called when the widget is added to the app."""
        self.set_interval(1 / 60, self.update_time)

    def update_time(self) -> None:
        """Method to update the time attribute."""
        self.time = monotonic() - self.start_time

    def watch_time(self, time: float) -> None:
        """Called when the time attribute changes."""
        minutes, seconds = divmod(time, 60)
        hours, minutes = divmod(minutes, 60)
        self.update(f"{hours:02.0f}:{minutes:02.0f}:{seconds:05.2f}")

# Example usage (simplified, assumes a Textual App context)
# app = App()
# app.mount(TimeDisplay())
# app.run()
```

----------------------------------------

TITLE: Python Code for Buttons
DESCRIPTION: This Python code creates a Textual app with a container and two buttons (Yes and No) styled with CSS. It demonstrates how to structure a simple Textual application with basic layout and styling.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_28

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static
from textual.containers import Horizontal

class NestingExample(App):
    CSS_PATH = "nesting02.tcss"

    def compose(self) -> ComposeResult:
        yield Horizontal(
            Static("Yes", classes="button affirmative"),
            Static("No", classes="button negative"),
            id="questions",
        )
```

----------------------------------------

TITLE: Implementing Async Handlers for Network Requests in Python
DESCRIPTION: Demonstrates the use of async handlers and background tasks for network requests in a Textual application, ensuring UI responsiveness.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/events/dictionary.py"
```

----------------------------------------

TITLE: Reactive Dynamic Actions
DESCRIPTION: Shows how to implement dynamic actions using reactives for automatic binding updates.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/actions.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/actions/actions07.py"
```

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/actions/actions06.tcss"
```

----------------------------------------

TITLE: Implementing Modes in Python using Textual
DESCRIPTION: This example demonstrates how to implement modes in a Textual application. It defines three screens (Dashboard, Settings, Help) and allows switching between them using key bindings.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.containers import Container
from textual.screen import Screen
from textual.widgets import Header, Footer, Static

class DashboardScreen(Screen):
    def compose(self) -> ComposeResult:
        yield Container(Static("Dashboard"))

class SettingsScreen(Screen):
    def compose(self) -> ComposeResult:
        yield Container(Static("Settings"))

class HelpScreen(Screen):
    def compose(self) -> ComposeResult:
        yield Container(Static("Help"))

class ModesApp(App):
    CSS_PATH = "modes01.css"
    BINDINGS = [
        ("d", "switch_mode('dashboard')", "Dashboard"),
        ("s", "switch_mode('settings')", "Settings"),
        ("h", "switch_mode('help')", "Help"),
        ("q", "quit", "Quit"),
    ]
    MODES = {
        "dashboard": DashboardScreen(),
        "settings": SettingsScreen(),
        "help": HelpScreen(),
    }
    DEFAULT_MODE = "dashboard"

    def compose(self) -> ComposeResult:
        yield Header()
        yield Footer()

    def on_mount(self) -> None:
        self.switch_mode("dashboard")

if __name__ == "__main__":
    app = ModesApp()
    app.run()
```

----------------------------------------

TITLE: Static Widget with Content Update in Textual (Python)
DESCRIPTION: This code defines a custom widget named `Hello` that extends the `Static` widget class. It cycles through greetings in different languages when clicked. The `update` method is used to change the content of the widget, and a click handler is used to trigger the update.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_3

LANGUAGE: Python
CODE:
```
class Hello(Static):
    
```

----------------------------------------

TITLE: Advanced Content Alignment Grid - CSS
DESCRIPTION: CSS styles for the 3x3 grid demonstrating all content alignment possibilities.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/content_align.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/content_align_all.tcss"
```

----------------------------------------

TITLE: Styling Combined Layouts in Textual CSS
DESCRIPTION: Textual CSS (.tcss) file providing the styles and layout rules for the 'combining_layouts.py' example. This file defines how different layout techniques (like grids, docking, layers, offsets) are applied and interact to create a complex user interface.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_16

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/layout/combining_layouts.tcss"
```

----------------------------------------

TITLE: Event Handler with Multiple Sender Filters in Textual
DESCRIPTION: Demonstrates how to handle events from multiple specific widgets by using a list of selectors in the decorator.
SOURCE: https://github.com/textualize/textual/blob/main/docs/api/on.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
@on(Button.Pressed, "#submit-button, #cancel-button")
def on_form_button_pressed(self, event: Button.Pressed) -> None:
    if event.button.id == "submit-button":
        self.submit_form()
    else:
        self.cancel_form()

```

----------------------------------------

TITLE: Modal Dialog Screen Implementation
DESCRIPTION: Implements a modal quit confirmation dialog using basic Screen class with custom styling.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/screens/modal01.py"
```

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/screens/modal01.tcss"
```

----------------------------------------

TITLE: Defining Select Widget Options with Typing in Textual (Python)
DESCRIPTION: This snippet demonstrates how to construct a list of selectable options and type-annotate a Select widget in Python using the Textual library. The options variable consists of tuples of display labels and integer values, which are provided to the Select constructor. The Select widget can be generically typed (here, as Select[int]), though typing is optional. No external dependencies are required beyond the Textual library. The options tuple structure sets the displayed labels and their corresponding selected values, available via the widget's value attribute.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/select.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
options = [("First", 1), ("Second", 2)]\nmy_select: Select[int] =  Select(options)
```

----------------------------------------

TITLE: Failed Attempt at Non-Blocking UI with asyncio.create_task
DESCRIPTION: A modified version of the previous example that attempts to use asyncio.create_task to run a time-consuming operation concurrently. However, it still blocks because time.sleep is used inside the async function instead of asyncio.sleep with await.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/responsive-app-background-task.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/blog/snippets/2022-12-07-responsive-app-background-task/blocking02.py"
```

----------------------------------------

TITLE: Initializing Header and Footer Widgets in Textual
DESCRIPTION: This code defines a Textual app with a screen and placeholder widgets for the header and footer. It demonstrates the basic structure for setting up the initial layout of a Textual application, focusing on defining the app, screen, and placeholder widgets for header and footer.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/design-a-layout.md#_snippet_0

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Placeholder
from textual.containers import Screen


class Header(Placeholder):
    
```

----------------------------------------

TITLE: Dynamic Screen Installation Example
DESCRIPTION: Shows how to dynamically install screens using the install_screen method rather than the SCREENS class variable.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/screens/screen02.py"
```

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/screens/screen02.tcss"
```

----------------------------------------

TITLE: Returning Data from Modal Screen in Python using Textual
DESCRIPTION: This snippet demonstrates how to return data from a modal screen using the dismiss() method. It shows a QuitScreen class that returns a boolean value indicating whether the user chose to quit the app.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.containers import Center
from textual.screen import ModalScreen
from textual.widgets import Button, Label

class QuitScreen(ModalScreen[bool]):
    def compose(self) -> ComposeResult:
        yield Center(
            Label("Are you sure you want to quit?"),
            Button("Quit", id="quit"),
            Button("Cancel", id="cancel"),
        )

    def on_button_pressed(self, event: Button.Pressed) -> None:
        if event.button.id == "quit":
            self.dismiss(True)
        else:
            self.dismiss(False)

class QuitApp(App):
    CSS_PATH = "modal01.tcss"

    def compose(self) -> ComposeResult:
        yield Button("Quit", id="quit")

    def on_button_pressed(self, event: Button.Pressed) -> None:
        if event.button.id == "quit":
            self.push_screen(QuitScreen(), self.check_quit)

    def check_quit(self, quit: bool) -> None:
        if quit:
            self.exit()

if __name__ == "__main__":
    app = QuitApp()
    app.run()
```

----------------------------------------

TITLE: Input Widget Implementation in Textual
DESCRIPTION: Demonstrates a text input control with interactive typing support.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_8

LANGUAGE: textual
CODE:
```
docs/examples/widgets/input.py
```

----------------------------------------

TITLE: World Clock App with Reactive Time Updates (No Data Binding) - Python
DESCRIPTION: This Python code defines a Textual application with a WorldClock widget that displays the time in a given timezone. The app updates the time reactive attribute of every WorldClock instance in a loop, requiring manual updates for each clock.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_22

LANGUAGE: python
CODE:
```
from __future__ import annotations

import asyncio
import time
from datetime import datetime, timezone

import pytz
from textual.app import App, ComposeResult
from textual.containers import Horizontal
from textual.reactive import reactive
from textual.widget import Widget
from textual.widgets import Static


class TimeDisplay(Static):
    
```

----------------------------------------

TITLE: Exiting a Textual App with Return Value
DESCRIPTION: This snippet demonstrates how to exit a Textual app and return a value. It creates two buttons and returns the ID of the clicked button when exiting.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
from textual.app import App
from textual.containers import Grid
from textual.widgets import Button, Header

class QuestionApp(App):
    def compose(self):
        yield Header()
        yield Grid(
            Button("Yes", id="yes", variant="success"),
            Button("No", id="no", variant="error"),
            id="buttons"
        )

    def on_button_pressed(self, event: Button.Pressed) -> None:
        self.exit(event.button.id)

if __name__ == "__main__":
    app = QuestionApp()
    result = app.run()
    print(result)
```

----------------------------------------

TITLE: DataTable Widget Implementation in Textual
DESCRIPTION: Shows implementation of a configurable data table with cursor support.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_3

LANGUAGE: textual
CODE:
```
docs/examples/widgets/data_table.py
```

----------------------------------------

TITLE: Querying a Single Widget by ID in Python
DESCRIPTION: Demonstrates how to use query_one to retrieve a single widget with a specific ID. It also shows how to specify the expected widget type for type checking.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
send_button = self.query_one("#send")

send_button = self.query_one("#send", Button)
```

----------------------------------------

TITLE: Installing Textual via PyPI
DESCRIPTION: Basic installation command for Textual using pip package manager.
SOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pip install textual
```

----------------------------------------

TITLE: Installing Textual via pip
DESCRIPTION: This command installs Textual and its development tools using pip. It's the recommended way to set up Textual for use in your Python projects.
SOURCE: https://github.com/textualize/textual/blob/main/README.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
pip install textual textual-dev
```

----------------------------------------

TITLE: Filtering Query Results in Textual
DESCRIPTION: Demonstrates how to use the filter method to refine query results based on additional criteria.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
buttons_query = self.query("Button")
disabled_buttons = buttons_query.filter(".disabled")
```

----------------------------------------

TITLE: FizzBuzz Widget with Custom Width
DESCRIPTION: This example modifies the FizzBuzz widget to set a custom width for the table. It overrides the get_content_width method to force the table to be 50 characters wide, and uses expand=True to fill the allocated space.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_15

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Header, Footer
from textual.widget import Widget
from rich.table import Table


class FizzBuzz(Widget):
    
```

----------------------------------------

TITLE: Declaring a Threaded Worker in Textual
DESCRIPTION: Example showing how to declare a threaded worker in Textual using the @work decorator with thread=True parameter, required as of version 0.31.0.
SOURCE: https://github.com/textualize/textual/blob/main/docs/FAQ.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
@work(thread=True)
def run_in_background():
    ...
```

----------------------------------------

TITLE: World Clock App with Data Binding and Renamed Attribute - Python
DESCRIPTION: This Python code extends the data binding example by demonstrating how to bind reactive attributes when the attribute names differ between the parent app and the child widget. It uses keyword arguments in the `data_bind` call to map the app's `time` attribute to the widget's `clock_time` attribute.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_25

LANGUAGE: python
CODE:
```
from __future__ import annotations

import asyncio
import time
from datetime import datetime, timezone

import pytz
from textual.app import App, ComposeResult
from textual.containers import Horizontal
from textual.reactive import reactive
from textual.widget import Widget
from textual.widgets import Static


class TimeDisplay(Static):
    
```

----------------------------------------

TITLE: Defining States with CSS Classes (Textual CSS)
DESCRIPTION: Defines CSS rules for a Textual stopwatch widget, including a `.started` class to apply specific styles (like background color and hiding/showing buttons) when the widget is in a started state.
SOURCE: https://github.com/textualize/textual/blob/main/docs/tutorial.md#_snippet_7

LANGUAGE: css
CODE:
```
/* stopwatch04.tcss */

Screen {
    align: center middle;
}

#stopwatch {
    width: 50%;
    height: 50%;
    background: $surface;
    border: heavy $surface;
    align: center middle;
}

#time {
    width: 100%;
    height: 50%;
    text-align: center;
    background: $panel;
    content-align: center middle;
    color: $text;
}

#buttons {
    width: 100%;
    height: 50%;
    layout: horizontal;
    align: center middle;
}

Button {
    width: 1fr;
    margin: 1;
}

/* New rules for the started state */
.started {
    background: $success;
}

.started #time {
    background: $success-darken-2;
}

.started #start {
    display: none;
}

.started #reset {
    display: none;
}

.started #stop {
    display: block;
}

/* Default state rules */
:not(.started) #stop {
    display: none;
}
```

----------------------------------------

TITLE: Initializing LLM Model on App Mount in Python
DESCRIPTION: Sets up the language model when the app is mounted. This method is called early in the app's lifecycle and is used for initial setup.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/anatomy-of-a-textual-user-interface.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
    def on_mount(self) -> None:
        self.model = llm.get_model("gpt-4o")
```

----------------------------------------

TITLE: Sorting DataTable Rows using Columns and Key Functions in Textual (Python)
DESCRIPTION: This code illustrates sorting table rows either by columns (specifying keys or ColumnKey objects) or via a key function, optionally combined, and with a reverse option. The snippet targets DataTable's sort method, allowing both natural and calculated ordering. It requires a DataTable instance with data; function-style and column-based sorts are demonstrated, including using lambdas for custom ordering (e.g., multiplying hours by rate). Outputs are sorted table views per criteria.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
```python\n--8<-- \"docs/examples/widgets/data_table_sort.py\"\n```
```

----------------------------------------

TITLE: Dark Mode CSS Styling in Textual v0.38.0
DESCRIPTION: Example of the new more concise way to target dark mode styles in Textual v0.38.0 using the :dark pseudo selector.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-38-0.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
MyWidget:dark Label {
    ...
}
```

----------------------------------------

TITLE: Python Code for Buttons
DESCRIPTION: This Python code creates a Textual app with a container and two buttons (Yes and No) styled with CSS. It demonstrates how to structure a simple Textual application with basic layout and styling.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_26

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static
from textual.containers import Horizontal

class NestingExample(App):
    CSS_PATH = "nesting01.tcss"

    def compose(self) -> ComposeResult:
        yield Horizontal(
            Static("Yes", classes="button affirmative"),
            Static("No", classes="button negative"),
            id="questions",
        )
```

----------------------------------------

TITLE: Defining a Textual App with Custom Init Arguments in Python
DESCRIPTION: This snippet demonstrates how to create a custom Textual App class named `Greetings` that inherits from `textual.app.App`. It overrides the `__init__` method to accept `greeting` and `to_greet` string arguments with default values. These arguments are stored as instance attributes and used within the `compose` method to display a message using a `Static` widget. The `super().__init__()` call ensures the parent class is initialized correctly.
SOURCE: https://github.com/textualize/textual/blob/main/questions/pass-args-to-app.question.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static

class Greetings(App[None]):

    def __init__(self, greeting: str="Hello", to_greet: str="World") -> None:
        self.greeting = greeting
        self.to_greet = to_greet
        super().__init__()

    def compose(self) -> ComposeResult:
        yield Static(f"{self.greeting}, {self.to_greet}")
```

----------------------------------------

TITLE: CSS with Nesting
DESCRIPTION: This CSS defines the same styles as the previous example, but uses nesting to group rules related to the `#questions` container and its buttons. The nesting selector (&) is used to combine selectors for specific button types.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_27

LANGUAGE: css
CODE:
```
#questions {
    layout: horizontal;
    height: 3;
    padding: 1;
    align: center middle;

    .button {
        width: 10;
        height: 1fr;
        border: tall $primary 60%;
        color: $text;
        dock: left;
        margin: 1;
        content-align: center middle;

        &.affirmative {
            background: $success;
            color: $text-light;
        }

        &.negative {
            background: $error;
            color: $text-light;
        }
    }
}
```

----------------------------------------

TITLE: Basic Widget Rendering with Markup
DESCRIPTION: Example of a widget render method returning markup string
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_10

LANGUAGE: python
CODE:
```
class WelcomeWidget(Widget):
    def render(self) -> RenderResult:
        return "[b]Hello, World![/b]"
```

----------------------------------------

TITLE: Defining Custom Markdown Widgets for Prompt and Response in Python
DESCRIPTION: Creates custom Markdown widgets for displaying user prompts and AI responses in the chat interface. The Response widget includes a border title.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/anatomy-of-a-textual-user-interface.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
class Prompt(Markdown):
    pass


class Response(Markdown):
    BORDER_TITLE = "Mother"
```

----------------------------------------

TITLE: BitSwitch: Sending Custom Messages on Switch Change (byte02.py)
DESCRIPTION: This code snippet demonstrates how to extend the `ByteEditor` widget so that clicking any of the 8 `BitSwitch` widgets updates the decimal value. It adds a custom message to `BitSwitch` that is caught in the `ByteEditor`. The `BitSwitch` widget now has an `on_switch_changed` method which will handle a `Switch.Changed` message, sent when the user clicks a switch. This is used to store the new value of the bit, and sent a new custom message, `BitSwitch.BitChanged`.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_29

LANGUAGE: python
CODE:
```
class BitSwitch(Widget):
    
```

----------------------------------------

TITLE: Advanced Content Alignment Grid - Python
DESCRIPTION: Python implementation of a 3x3 grid showing all possible content alignment combinations.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/content_align.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/content_align_all.py"
```

----------------------------------------

TITLE: Auto-sizing Grid Columns in Textual
DESCRIPTION: Implements auto-sizing for the first column while maintaining fixed proportions for others. The auto column adjusts its width based on content.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
hl_lines="6 9"
--8<-- "docs/examples/guide/layout/grid_layout_auto.py"
```

LANGUAGE: css
CODE:
```
hl_lines="4"
--8<-- "docs/examples/guide/layout/grid_layout_auto.tcss"
```

----------------------------------------

TITLE: CSS Path Configuration in Textual App
DESCRIPTION: Demonstrates how to configure an external CSS path in a Textual application using the CSS_PATH class variable.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_9

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/app/question02.py"
```

----------------------------------------

TITLE: Defining Layout Style in CSS
DESCRIPTION: Demonstrates how to set the layout style using CSS syntax. The layout can be set to grid, horizontal, or vertical.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layout.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
layout: grid | horizontal | vertical;
```

----------------------------------------

TITLE: Implementing a Non-Blocking UI in Textual with asyncio.sleep
DESCRIPTION: A properly implemented non-blocking Textual application that uses asyncio.sleep with await to perform time-consuming operations. This allows the UI to remain responsive during background tasks, with the user able to interact with the ColourChanger widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/responsive-app-background-task.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
--8<-- "docs/blog/snippets/2022-12-07-responsive-app-background-task/nonblocking01.py"
```

----------------------------------------

TITLE: Basic Input Widget Example - Python
DESCRIPTION: Demonstrates creating a simple form using two Input widgets in a Textual application.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/input.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/input.py"
```

----------------------------------------

TITLE: Message Handling with @on Decorator in Textual
DESCRIPTION: Shows the new @on decorator approach in Textual 0.23.0 that allows dispatching events based on CSS selectors, enabling separate handlers for different buttons or button groups.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-23-0.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/events/on_decorator02.py"
```

----------------------------------------

TITLE: Button Widget Example Implementation - Python
DESCRIPTION: Example implementation showing different button variants and their disabled states with event handling.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/button.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/button.py"
```

----------------------------------------

TITLE: Configuring Entry Point in pyproject.toml
DESCRIPTION: This TOML configuration specifies the entry point for the calculator application. It maps the `calculator` command to the `calculator` function within the `textual_calculator.entry_points` module, enabling the application to be run from the command line using the `calculator` command.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#_snippet_12

LANGUAGE: toml
CODE:
```
[project.scripts]
calculator = "textual_calculator.entry_points:calculator"
```

----------------------------------------

TITLE: ListView Implementation Example in Python
DESCRIPTION: Example demonstrating basic usage of ListView with multiple ListItem elements, showing how to implement navigable list items.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/list_item.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/list_view.py"
```

----------------------------------------

TITLE: Button with CSS Class in Textual
DESCRIPTION: This code demonstrates how to create a Textual Button widget and assign a CSS class named 'success' to it. This allows the button to be styled using CSS rules that target the '.success' class.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_9

LANGUAGE: python
CODE:
```
yield Button(classes="success")
```

----------------------------------------

TITLE: Defining Component Classes for Styling in Textual (checker02.py)
DESCRIPTION: This example demonstrates how to define component classes within a Textual widget to enable styling via CSS. It defines a checkerboard widget with white and black squares, assigning component classes to each for customizable styling.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_22

LANGUAGE: python
CODE:
```
class Checkerboard(Widget):

    COMPONENT_CLASSES = {
        "checkerboard--white-square",
        "checkerboard--black-square",
    }

    DEFAULT_CSS = """
    Checkerboard {
        height: 100%;
        width: 100%;
    }
    .checkerboard--white-square {
        background: white;
    }

    .checkerboard--black-square {
        background: black;
    }
    """

    def render_line(self, y: int) -> Strip:
        width = self.size.width
        white = self.get_component_rich_style("checkerboard--white-square")
        black = self.get_component_rich_style("checkerboard--black-square")
        line = []
        for x in range(width):
            if (x + y) % 2 == 0:
                line.append((white, " "))
            else:
                line.append((black, " "))
        return Strip(line)


class CheckerboardApp(App):
    def compose(self) -> ComposeResult:
        yield Checkerboard()
```

----------------------------------------

TITLE: Styling a Focused Widget in Textual
DESCRIPTION: This CSS snippet styles a widget when it has focus, changing the background and foreground colors to indicate focus.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_11

LANGUAGE: css
CODE:
```
Counter:focus {
    background: $panel;
    color: $text;
}

Counter {
    height: 5;
    width: 10;
    border: tall $primary;
    content-align: center middle;
}
```

----------------------------------------

TITLE: Enhanced Modal Screen Implementation
DESCRIPTION: Improved version of the modal dialog using ModalScreen class for better behavior and visual feedback.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/screens/modal02.py"
```

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/screens/modal01.tcss"
```

----------------------------------------

TITLE: Event Handler with Event Parameter in Textual
DESCRIPTION: Demonstrates defining an event handler that receives the event object, allowing access to event-specific data like the button that was pressed.
SOURCE: https://github.com/textualize/textual/blob/main/docs/api/on.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
@on(Button.Pressed)
def on_button_pressed(self, event: Button.Pressed) -> None:
    pressed_button = event.button

```

----------------------------------------

TITLE: Implementing Margin in Python
DESCRIPTION: Demonstrates how to set margins in Python using Textual's API, including single-value, two-value, and four-value notations.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/margin.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
# Set margin of 1 around all edges
widget.styles.margin = 1
# Set margin of 2 on the top and bottom edges, and 4 on the left and right
widget.styles.margin = (2, 4)
# Set margin of 1 on top, 2 on the right, 3 on the bottom, and 4 on the left
widget.styles.margin = (1, 2, 3, 4)
```

----------------------------------------

TITLE: Passing Arguments to a Textual App
DESCRIPTION: Example demonstrating how to create a Textual app that accepts initialization arguments. Shows how to override __init__ to accept custom parameters that can be used within the app.
SOURCE: https://github.com/textualize/textual/blob/main/docs/FAQ.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static

class Greetings(App[None]):

    def __init__(self, greeting: str="Hello", to_greet: str="World") -> None:
        self.greeting = greeting
        self.to_greet = to_greet
        super().__init__()

    def compose(self) -> ComposeResult:
        yield Static(f"{self.greeting}, {self.to_greet}")
```

----------------------------------------

TITLE: Implementing Variant Watching for Button Widget in Python
DESCRIPTION: This snippet shows how the Button widget in Textual handles variant changes by updating CSS classes.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/placeholder-pr.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
class Button(Static, can_focus=True):
    # ...

    def watch_variant(self, old_variant: str, variant: str):
        self.remove_class(f"-{old_variant}")
        self.add_class(f"-{variant}")
```

----------------------------------------

TITLE: Matching Specific Attributes with @on Decorator in Python
DESCRIPTION: Shows how to use the @on decorator to match specific attributes of a Message in Textual.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
@on(TabbedContent.TabActivated, pane="#home")
def home_tab(self) -> None:
    self.log("Switched back to home tab.")
    ...
```

----------------------------------------

TITLE: Checkerboard Widget with Mouse Highlight in Python
DESCRIPTION: This code demonstrates how to update a checkerboard widget to highlight the square under the mouse pointer using the Line API. It includes a reactive variable to track the cursor position and refresh only the necessary regions of the widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_24

LANGUAGE: python
CODE:
```
    --8<-- "docs/examples/guide/widgets/checker04.py"

```

----------------------------------------

TITLE: Compound Widget Example in Python
DESCRIPTION: This code shows how to create a compound widget by combining an Input and a Label. The `compose` method is used to yield child widgets, creating a reusable widget with a right-aligned label next to an input control.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_25

LANGUAGE: python
CODE:
```
    --8<-- "docs/examples/guide/compound/compound01.py"

```

----------------------------------------

TITLE: Composing UI Layout for AI Chat TUI in Python
DESCRIPTION: Defines the layout of the AI chat TUI using Textual's compose method. Includes a header, scrollable chat view, input field, and footer.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/anatomy-of-a-textual-user-interface.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
    def compose(self) -> ComposeResult:
        yield Header()
        with VerticalScroll(id="chat-view"):
            yield Response("INTERFACE 2037 READY FOR INQUIRY")
        yield Input(placeholder="How can I help you?")
        yield Footer()
```

----------------------------------------

TITLE: Creating Animated Gradient Background Widget in Python using Textual
DESCRIPTION: Example demonstrating how to create a custom widget that combines both render() and compose() methods. The widget displays a message using compose() while rendering an animated linear gradient background using render(). The widget refreshes 30 times per second to create the animation effect.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/render-and-compose.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/how-to/render_compose.py"
```

----------------------------------------

TITLE: Creating SelectionList from Tuples in Python
DESCRIPTION: Provides the Python code reference for initializing a `SelectionList` widget using a list of tuples. Each tuple must contain a display prompt (string) and a unique value, and can optionally include an initial selected state (boolean). The actual code is included from the specified file path (`docs/examples/widgets/selection_list_tuples.py`). Note the type hint `SelectionList[int]` matching the integer values.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
~~~python
--8<-- "docs/examples/widgets/selection_list_tuples.py"
~~~
```

----------------------------------------

TITLE: New Custom Message Class Definition in Textual (0.14.0+)
DESCRIPTION: Example of how custom message classes should be defined in Textual 0.14.0 and later, without the sender parameter in the constructor as it's now handled automatically.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-14-0.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
class MyWidget(Widget):

    class Changed(Message):
        """My widget change event."""
        def __init__(self, item_index:int) -> None:
            self.item_index = item_index
            super().__init__()
```

----------------------------------------

TITLE: Applying Alpha Transparency to Widget Colors in Textual
DESCRIPTION: This example shows how to use alpha transparency in widget background colors. It creates three Static widgets with different levels of transparency using rgba color format.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static

class AlphaApp(App):
    def compose(self) -> ComposeResult:
        yield Static("Alpha 0.1", id="alpha1")
        yield Static("Alpha 0.5", id="alpha2")
        yield Static("Alpha 1.0", id="alpha3")

    def on_mount(self) -> None:
        self.query_one("#alpha1").styles.background = "rgba(192,78,96,0.1)"
        self.query_one("#alpha2").styles.background = "rgba(192,78,96,0.5)"
        self.query_one("#alpha3").styles.background = "rgba(192,78,96,1.0)"

if __name__ == "__main__":
    app = AlphaApp()
    app.run()
```

----------------------------------------

TITLE: Implementing Border and Text Style Customization in Textual (Python)
DESCRIPTION: This Python script demonstrates how to customize border colors and text styles in a Textual application. It likely includes the main application structure and widget definitions with custom styling applied.
SOURCE: https://github.com/textualize/textual/blob/main/docs/snippets/border_title_color.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/border_title_colors.py"
```

----------------------------------------

TITLE: FizzBuzz Table Widget with Rich
DESCRIPTION: This example demonstrates how to create a Textual widget that displays a FizzBuzz table using Rich renderables. It showcases the use of a Rich table as widget content to visualize the FizzBuzz sequence.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_13

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Header, Footer
from textual.widget import Widget
from rich.table import Table


class FizzBuzz(Widget):
    
```

----------------------------------------

TITLE: Handling Events in a Textual App
DESCRIPTION: This snippet shows how to handle events in a Textual app, specifically the 'mount' and 'key' events. It changes the background color on mount and in response to number key presses.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
from textual.app import App
from textual.color import Color

class ColorApp(App):
    def on_mount(self) -> None:
        self.screen.styles.background = "darkblue"

    def on_key(self, event) -> None:
        if event.key.isdecimal():
            self.screen.styles.background = Color.from_hsl(
                float(event.key) / 10, 0.8, 0.5
            )

if __name__ == "__main__":
    app = ColorApp()
    app.run()
```

----------------------------------------

TITLE: Docking Header and Footer Widgets in Textual
DESCRIPTION: This code demonstrates how to dock header and footer widgets to the top and bottom edges of the screen in a Textual application using CSS. It shows how to use the `dock` style rule to fix the position of widgets and automatically adjust the available area for other widgets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/design-a-layout.md#_snippet_1

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Placeholder
from textual.containers import Screen
from textual import css


class Header(Placeholder):
    
```

----------------------------------------

TITLE: Key Bindings in Textual
DESCRIPTION: Example demonstrating how to bind keys to actions in a Textual application with both Python implementation and CSS styling.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/input.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/input/binding01.py"
```

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/input/binding01.tcss"
```

----------------------------------------

TITLE: Using FR Units for Flexible Layout in Textual
DESCRIPTION: This code demonstrates how to use FR units to create a flexible layout in a Textual application, ensuring that the central area resizes with the terminal window. It shows how to set the width and height of a widget to `1fr` to divide the remaining space equally among the widgets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/design-a-layout.md#_snippet_2

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Placeholder
from textual.containers import Screen
from textual import css


class Header(Placeholder):
    
```

----------------------------------------

TITLE: Implementing Custom Command Provider for Python File Opening
DESCRIPTION: Shows how to create a custom command provider that allows opening Python files through the command palette. It implements startup, search, and discover methods to handle file listing and searching.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/command_palette.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
from pathlib import Path
from typing import Iterable

from textual.app import App, ComposeResult
from textual.command import CommandPalette, Hit, DiscoveryHit, Provider
from textual.widgets import Header, Footer

class PythonFileProvider(Provider):
    def startup(self) -> None:
        self.files = list(Path(".").glob("*.py"))

    async def search(self, query: str) -> Iterable[Hit]:
        matcher = self.matcher(query)
        for file in self.files:
            score = matcher.match(file.name)
            if score > 0:
                yield Hit(
                    score=score,
                    highlight=matcher.highlight(file.name),
                    callback=lambda file=file: self.app.open_file(file),
                )

    async def discover(self) -> Iterable[DiscoveryHit]:
        for file in self.files[:5]:
            yield DiscoveryHit(
                display=f"Open {file.name}",
                callback=lambda file=file: self.app.open_file(file),
            )

class CommandPaletteApp(App):
    COMMANDS = App.COMMANDS + [PythonFileProvider()]

    def compose(self) -> ComposeResult:
        yield Header()
        yield Footer()

    def open_file(self, path: Path) -> None:
        self.bell()

if __name__ == "__main__":
    app = CommandPaletteApp()
    app.run()
```

----------------------------------------

TITLE: Complete Progress Bar Application - Python
DESCRIPTION: Full application example showing a progress bar tracking funding levels with a total of 100 steps and hidden ETA countdown.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/progress_bar.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/progress_bar.py"
```

----------------------------------------

TITLE: Defining Height Style Syntax in Textual CSS
DESCRIPTION: Demonstrates the syntax for defining the height style in Textual CSS. It uses a scalar value to determine the vertical length of the widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/height.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
height: <scalar>;
```

----------------------------------------

TITLE: Mounting Widgets Dynamically in a Textual App
DESCRIPTION: This snippet demonstrates how to dynamically mount widgets in response to events. It adds a Welcome widget each time a key is pressed.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
from textual.app import App
from textual.widgets import Welcome

class WelcomeApp(App):
    def on_key(self) -> None:
        self.mount(Welcome())

if __name__ == "__main__":
    app = WelcomeApp()
    app.run()
```

----------------------------------------

TITLE: Adding Keybindings to a Textual Widget
DESCRIPTION: This snippet demonstrates how to add keybindings to a Textual widget. The `BINDINGS` class variable associates key presses with actions, allowing the widget to respond to keyboard input.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_12

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static
from textual.reactive import reactive

class Counter(Static):
    
```

----------------------------------------

TITLE: Using Percentage Values in CSS for Textual
DESCRIPTION: This example demonstrates how to use percentage values in CSS for a Textual application. It shows both integer percentages for color opacity and negative/decimal percentages for offset positioning.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/percentage.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
#footer {
    /* Integer followed by % */
    color: red 70%;

    /* The number can be negative/decimal, although that may not make sense */
    offset: -30% 12.5%;
}
```

----------------------------------------

TITLE: Creating ListView Example - Python
DESCRIPTION: Example implementation showing how to create and use a ListView widget in a Textual application.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/list_view.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/list_view.py"
```

----------------------------------------

TITLE: Custom Widget with Render Method in Textual (Python)
DESCRIPTION: This code defines a custom widget class named `Hello` that extends the base `Widget` class. It overrides the `render` method to return a Textual `Text` object containing a formatted greeting string. The greeting string uses Textual's markup to style the word 'World' in bold.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_0

LANGUAGE: Python
CODE:
```
class Hello(Widget):
    
```

----------------------------------------

TITLE: Setting Widget Colors in Textual Python Application
DESCRIPTION: This snippet demonstrates different ways to set colors for widgets in a Textual application. It uses named colors, hex colors, and RGB decimal colors to style three Static widgets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static
from textual.color import Color

class ColorsApp(App):
    def compose(self) -> ComposeResult:
        yield Static("Named color: crimson", id="named")
        yield Static("Hex color: #9932CC (dark orchid)", id="hex")
        yield Static("RGB color: rgb(50,205,50) (limegreen)", id="rgb")

    def on_mount(self) -> None:
        named = self.query_one("#named")
        hex = self.query_one("#hex")
        rgb = self.query_one("#rgb")

        named.styles.color = "crimson"
        hex.styles.color = "#9932CC"
        rgb.styles.color = "rgb(50,205,50)"

if __name__ == "__main__":
    app = ColorsApp()
    app.run()
```

----------------------------------------

TITLE: Setting Widget Margins
DESCRIPTION: Demonstrates how to add margin space between widgets and explains margin overlap behavior.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_15

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/styles/margin01.py"
```

----------------------------------------

TITLE: Basic Position Examples in Python
DESCRIPTION: Example showing how to set position style using Python code. Demonstrates both relative and absolute positioning.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/position.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
widget.styles.position = "relative"
widget.styles.position = "absolute"
```

----------------------------------------

TITLE: Using Theme Variables in CSS for Textual
DESCRIPTION: This CSS snippet shows how to use theme variables to style a custom widget in Textual. It demonstrates the use of primary and foreground color variables.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/design.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
MyWidget {
    background: $primary;
    color: $foreground;
}
```

----------------------------------------

TITLE: Demonstrating FR Units in Textual Layout
DESCRIPTION: Shows how to use FR units for flexible space distribution between widgets, creating a layout with 2:1 height ratio.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/styles/dimensions04.py"
```

----------------------------------------

TITLE: Implementing IntervalUpdater with Static.update in Python
DESCRIPTION: This snippet shows how to implement an IntervalUpdater class using Static.update from Textual. It demonstrates a simplified way to create a widget that updates a Rich renderable 60 times per second.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/spinners-and-pbs-in-textual.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
class IntervalUpdater(Static):
    _renderable_object: RenderableType

    def __init__(self, renderable_object: RenderableType) -> None:  # (1)!
        super().__init__(renderable_object)  # (2)!

    def on_mount(self) -> None:
        self.interval_update = self.set_interval(1 / 60, self.refresh)  # (3)!
```

----------------------------------------

TITLE: CSS for Static Widget in Textual
DESCRIPTION: This CSS styles the `Hello` widget, setting its width, height, padding, border, background color, text color, and content alignment.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_4

LANGUAGE: CSS
CODE:
```
Hello {
    width: auto;
    height: auto;
    padding: 1 2;
    border: tall $primary;
    background: $panel;
    color: $text;
    content-align: center middle;
}
```

----------------------------------------

TITLE: Using @on Decorator with CSS Selectors in Python
DESCRIPTION: Demonstrates using the @on decorator with CSS selectors to create individual message handlers for different buttons in Textual.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/events/on_decorator02.py"
```

----------------------------------------

TITLE: Defining Message Handlers with @on Decorator in Python
DESCRIPTION: Demonstrates two equivalent ways of defining message handlers in Textual: using the @on decorator and using the naming convention.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
@on(Button.Pressed)
def handle_button_pressed(self):
    ...

def on_button_pressed(self):
    ...
```

----------------------------------------

TITLE: Running a Textual App with Initialization Arguments in Python
DESCRIPTION: This snippet shows three ways to instantiate and run the previously defined `Greetings` Textual app. The first example runs the app using the default arguments defined in its `__init__` method. The second example overrides the `to_greet` argument using a keyword argument. The third example provides both `greeting` and `to_greet` arguments positionally.
SOURCE: https://github.com/textualize/textual/blob/main/questions/pass-args-to-app.question.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
# Running with default arguments.
Greetings().run()

# Running with a keyword argument.
Greetings(to_greet="davep").run()

# Running with both positional arguments.
Greetings("Well hello", "there").run()
```

----------------------------------------

TITLE: Basic Width Example - CSS Implementation
DESCRIPTION: CSS code showing how to set widget width as a percentage.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/width.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/width.tcss"
```

----------------------------------------

TITLE: Row Span CSS Implementation
DESCRIPTION: CSS syntax for setting a widget to span multiple rows in a grid layout. The value must be a non-negative integer representing the number of rows to span.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/row_span.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
row-span: 3
```

----------------------------------------

TITLE: Demonstrating Various Height Units in Textual CSS
DESCRIPTION: CSS code showing different units and methods for setting widget heights in Textual, including lines, percentages, viewport units, and fractional units.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/height.md#2025-04-22_snippet_4

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/height_comparison.tcss"
```

----------------------------------------

TITLE: Compute Method Example - Python
DESCRIPTION: This example demonstrates how to use a compute method (`compute_color`) to combine red, green, and blue color components into a `Color` object. The `watch_color` method is then called when the result of `compute_color` changes, updating the background color of a widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_17

LANGUAGE: Python
CODE:
```
class ComputedApp(App):

    CSS_PATH = "computed01.tcss"

    red = reactive(128)
    green = reactive(128)
    blue = reactive(128)

    def compose(self) -> ComposeResult:
        with Horizontal():
            yield Input(value=str(self.red), id="red", title="Red")
            yield Input(value=str(self.green), id="green", title="Green")
            yield Input(value=str(self.blue), id="blue", title="Blue")
        yield Static("Color!", id="color")

    def compute_color(self) -> Color:
        
```

----------------------------------------

TITLE: Basic LoadingIndicator Implementation in Python
DESCRIPTION: Simple example demonstrating how to implement a LoadingIndicator widget in a Textual application.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/loading_indicator.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/loading_indicator.py"
```

----------------------------------------

TITLE: World Clock App with Data Binding - Python
DESCRIPTION: This Python code demonstrates data binding in a Textual application. It binds the app's `time` reactive attribute to the `time` attribute of the `WorldClock` widgets, eliminating the need for a separate watcher to update the clocks.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_24

LANGUAGE: python
CODE:
```
from __future__ import annotations

import asyncio
import time
from datetime import datetime, timezone

import pytz
from textual.app import App, ComposeResult
from textual.containers import Horizontal
from textual.reactive import reactive
from textual.widget import Widget
from textual.widgets import Static


class TimeDisplay(Static):
    
```

----------------------------------------

TITLE: Handling Messages with Arguments in Python
DESCRIPTION: Examples of message handlers with and without arguments in Textual, demonstrating how to access message data.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
def on_color_button_selected(self, message: ColorButton.Selected) -> None:
    self.screen.styles.animate("background", message.color, duration=0.5)

@on(ColorButton.Selected)
def animate_background_color(self, message: ColorButton.Selected) -> None:
    self.screen.styles.animate("background", message.color, duration=0.5)

def on_color_button_selected(self) -> None:
    self.app.bell()
```

----------------------------------------

TITLE: Grid Style Example Python
DESCRIPTION: Example Python code showing the implementation of a grid layout in a Textual application
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/index.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/grid.py"
```

----------------------------------------

TITLE: Defining a Widget Class
DESCRIPTION: This Python code defines a custom widget class named `Alert` that inherits from `Static`. This widget can then be styled using CSS selectors.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_4

LANGUAGE: python
CODE:
```
from textual.widgets import Static

class Alert(Static):
    pass
```

----------------------------------------

TITLE: Weather App with Worker State Logging - Python
DESCRIPTION: Implementation showing how to handle and log worker state changes using event handlers.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/workers.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/workers/weather04.py"
```

----------------------------------------

TITLE: CSS Min-height Basic Syntax
DESCRIPTION: Basic syntax example showing how to set minimum height using scalar values.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/min_height.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
min-height: <scalar>;
```

----------------------------------------

TITLE: Implementing a Blocking UI in Textual with time.sleep
DESCRIPTION: A Textual application that demonstrates the problem of blocking UI. When the user presses 'l', the application becomes unresponsive for 5 seconds while executing a time.sleep call, preventing interaction with the ColourChanger widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/responsive-app-background-task.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/blog/snippets/2022-12-07-responsive-app-background-task/blocking01.py"
```

----------------------------------------

TITLE: Position Example Implementation
DESCRIPTION: Python implementation showing how to use position styling in a Textual application.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/position.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/position.py"
```

----------------------------------------

TITLE: Python Link Implementation Example
DESCRIPTION: Python code example showing the implementation of styled links in a Textual application.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/index.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/links.py"
```

----------------------------------------

TITLE: Basic RadioSet Implementation in Python
DESCRIPTION: A simple example demonstrating how to create and use RadioSet widgets with both RadioButton instances and strings.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/radioset.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/radio_set.py"
```

----------------------------------------

TITLE: Setting Align Style in Python
DESCRIPTION: Python code snippets showing how to set the 'align' style programmatically. It includes examples for setting both axes simultaneously and individually.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/align.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
# Align child widgets to the center
widget.styles.align = ("center", "middle")
# Align child widgets to the top right
widget.styles.align = ("right", "top")

# Change the horizontal alignment of the children of a widget
widget.styles.align_horizontal = "right"
# Change the vertical alignment of the children of a widget
widget.styles.align_vertical = "middle"
```

----------------------------------------

TITLE: Setting Absolute Position with Python in Textual
DESCRIPTION: Python code example demonstrating how to set the position property to absolute and apply an offset of (10, 5) to a widget using the styles API.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/position.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.position = "absolute"
widget.styles.offset = (10, 5)
```

----------------------------------------

TITLE: Loading Indicator Example
DESCRIPTION: This example demonstrates how to use the loading reactive property to display a LoadingIndicator widget while data is being fetched. It simulates a network request with a sleep and toggles the loading property to show and hide the indicator.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_18

LANGUAGE: python
CODE:
```
import asyncio
import random

from textual.app import App, ComposeResult
from textual.widgets import Header, Footer, DataTable


class LoadingApp(App):
    
```

----------------------------------------

TITLE: Grid Layout Implementation in Textual
DESCRIPTION: Shows implementation of grid layouts with fixed and dynamic row configurations. Demonstrates basic grid usage with multiple widgets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/layout/grid_layout1.py"
```

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/layout/grid_layout1.tcss"
```

----------------------------------------

TITLE: Python Color Implementation in Textual
DESCRIPTION: Demonstrates how to set colors in Python using both string syntax and Color objects, including direct color creation and parsing from CSS syntax.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/color.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
# Mimicking the CSS syntax
widget.styles.background = "red"           # Color name
widget.styles.color = "$accent"            # Textual variable
widget.styles.tint = "hsl(300, 20%, 70%)"  # HSL description

from textual.color import Color
# Using a Color object directly...
color = Color(16, 200, 45)
# ... which can also parse the CSS syntax
color = Color.parse("#A8F")
```

----------------------------------------

TITLE: Centering a Button Widget in a Textual App
DESCRIPTION: Example showing how to center a button widget in a Textual screen using CSS alignment. This demonstrates the basic approach of using the align property on the parent container.
SOURCE: https://github.com/textualize/textual/blob/main/docs/FAQ.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Button

class ButtonApp(App):

    CSS = """
    Screen {
        align: center middle;
    }
    """

    def compose(self) -> ComposeResult:
        yield Button("PUSH ME!")

if __name__ == "__main__":
    ButtonApp().run()
```

----------------------------------------

TITLE: Initializing Textual Tabs with Explicit Tab Objects (Python)
DESCRIPTION: Shows how to initialize the Textual `Tabs` widget within a `compose` method by providing explicit `Tab` objects. This approach allows setting custom IDs for each tab, which can be useful for referencing specific tabs later (e.g., in event handlers). Requires the `Tabs` and `Tab` widgets, and `ComposeResult` type hint from Textual.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tabs.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
def compose(self) -> ComposeResult:
    yield Tabs(
        Tab("First tab", id="one"),
        Tab("Second tab", id="two"),
    )
```

----------------------------------------

TITLE: Defining Color Style Syntax in Textual CSS
DESCRIPTION: Specifies the syntax for the 'color' style in Textual CSS, allowing for color values or 'auto' with an optional opacity percentage.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/color.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
color: (<color> | auto) [<percentage>];
```

----------------------------------------

TITLE: Setting Box-sizing in CSS
DESCRIPTION: CSS examples showing how to set box-sizing to border-box (default) and content-box.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/box_sizing.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
/* Set box sizing to border-box (default) */
box-sizing: border-box;

/* Set box sizing to content-box */
box-sizing: content-box;
```

----------------------------------------

TITLE: Declaring a Threaded Worker in Textual (Python)
DESCRIPTION: This snippet demonstrates how to define a function intended to run as a threaded worker in Textual. It uses the `@work` decorator with the `thread=True` argument, which is mandatory for threaded workers since Textual version 0.31.0 to avoid a `WorkerDeclarationError`. The decorated function `run_in_background` will execute in a separate thread.
SOURCE: https://github.com/textualize/textual/blob/main/questions/worker-thread-error.question.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
@work(thread=True)
def run_in_background():
    ...
```

----------------------------------------

TITLE: Setting Background Colors in CSS
DESCRIPTION: Examples of setting background colors using various color formats in CSS, including solid colors, RGB, HSL, and opacity.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/background.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
/* Blue background */
background: blue;

/* 20% red background */
background: red 20%;

/* RGB color */
background: rgb(100, 120, 200);

/* HSL color */
background: hsl(290, 70%, 80%);
```

----------------------------------------

TITLE: Creating Content with Markup
DESCRIPTION: Demonstrates creating Content with markup processing enabled
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
Content.from_markup("hello, [bold]World[/bold]!")
```

----------------------------------------

TITLE: Clock with Recompose - Python
DESCRIPTION: This example demonstrates a clock implemented using recompose. The `Digits` widget is replaced with a new instance every time the `time` attribute changes, simplifying the code by removing the need for a separate `watch_time` method.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_16

LANGUAGE: Python
CODE:
```
class Digits(Widget):
    
```

----------------------------------------

TITLE: Adding Columns and Tweets with VerticalScroll
DESCRIPTION: Defines a Column widget by subclassing VerticalScroll to create columns with vertical scrollbars. Adds multiple Tweet placeholder widgets to each column to visualize the layout.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/design-a-layout.md#_snippet_4

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Header, Footer, HorizontalScroll, Placeholder, VerticalScroll


class Column(VerticalScroll):
    pass


class Tweet(Placeholder):
    pass


class ColumnsApp(App):
    CSS_PATH = "columns.tcss"
    BINDINGS = [("d", "toggle_dark", "Toggle dark mode")]

    def compose(self) -> ComposeResult:
        yield Header()
        yield Footer()
        with HorizontalScroll():
            with Column():
                for n in range(4):
                    yield Tweet(f"Tweet {n+1}")
            with Column():
                for n in range(2):
                    yield Tweet(f"Tweet {n+1}")
            with Column():
                for n in range(5):
                    yield Tweet(f"Tweet {n+1}")
            with Column():
                for n in range(3):
                    yield Tweet(f"Tweet {n+1}")


if __name__ == "__main__":
    app = ColumnsApp()
    app.run()
```

----------------------------------------

TITLE: Creating a Focusable Widget in Textual
DESCRIPTION: This snippet demonstrates how to create a focusable widget in Textual by setting the `can_focus` attribute to `True`. This allows the widget to receive keyboard input.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_10

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static

class Counter(Static):
    
```

----------------------------------------

TITLE: Example pyproject.toml [project] Section
DESCRIPTION: Shows the basic structure of the `[project]` section in `pyproject.toml`, including metadata like name, version, description, and dependencies.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#_snippet_5

LANGUAGE: TOML
CODE:
```
[project]
name = "textual-calculator"
dynamic = ["version"]
description = 'A example app'
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [
  { name = "Will McGugan", email = "redacted@textualize.io" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = []
```

----------------------------------------

TITLE: Setting Vertical Alignment in CSS for Textual
DESCRIPTION: This CSS snippet demonstrates how to set the vertical alignment of a container element to the top using the align-vertical property in Textual's CSS.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/vertical.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
.container {
    align-vertical: top;
}
```

----------------------------------------

TITLE: Configuring Gruvbox Theme Variables in Python
DESCRIPTION: Example of creating a Gruvbox theme with custom variables for cursor foreground and input selection background colors. The code demonstrates how to override default theme variables using the Theme constructor.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/design.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
Theme(
    name="gruvbox",
    primary="#85A598",
    secondary="#A89A85",
    warning="#fabd2f",
    error="#fb4934",
    success="#b8bb26",
    accent="#fabd2f",
    foreground="#fbf1c7",
    background="#282828",
    surface="#3c3836",
    panel="#504945",
    dark=True,
    variables={
        "block-cursor-foreground": "#fbf1c7",
        "input-selection-background": "#689d6a40",
    },
)
```

----------------------------------------

TITLE: CSS Text Wrap Style Definition
DESCRIPTION: Shows the basic CSS syntax for text wrapping with both wrap and nowrap options in Textual.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_wrap.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
text-wrap: wrap;
text-wrap: nowrap;
```

----------------------------------------

TITLE: Textual App with Reactive Bug
DESCRIPTION: This example demonstrates a Textual app that cycles through greetings but contains a bug where a watcher attempts to update a label before it is mounted, resulting in a NoMatches error. The reactive attribute is set in the constructor, which invokes a watcher before the widget is fully mounted.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_19

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Label
from textual.reactive import reactive

class Greeter(Label):

    DEFAULT_CSS = """
    Greeter {
        width: auto;
        height: auto;
        padding: 1 2;
        border: tall $primary;
    }
    """

    greeting: reactive[str] = reactive("Hello, World!")

    def watch_greeting(self, greeting: str) -> None:
        self.update(greeting)

    def on_mount(self) -> None:
        self.greeting = "Goodbye, World!"

class ReactiveBugApp(App):

    CSS = """
    Screen {
        layout: vertical;
        align: center middle;
    }
    """

    def compose(self) -> ComposeResult:
        yield Greeter()

if __name__ == "__main__":
    app = ReactiveBugApp()
    app.run()
```

----------------------------------------

TITLE: Content Alignment Python Examples
DESCRIPTION: Python code examples showing how to set content alignment using styles API.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/content_align.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
# Align content in the very center of a widget
widget.styles.content_align = ("center", "middle")
# Align content at the top right of a widget
widget.styles.content_align = ("right", "top")

# Change the horizontal alignment of the content of a widget
widget.styles.content_align_horizontal = "right"
# Change the vertical alignment of the content of a widget
widget.styles.content_align_vertical = "middle"
```

----------------------------------------

TITLE: Setting Grid Gutter in Python
DESCRIPTION: Shows how to set grid gutters programmatically in Python using Textual's style properties for vertical and horizontal gutters.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_gutter.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
widget.styles.grid_gutter_vertical = "1"
widget.styles.grid_gutter_horizontal = "2"
```

----------------------------------------

TITLE: Implementing Command Palette Provider in Python for Textual
DESCRIPTION: This code snippet demonstrates how to create a custom command provider for the Textual command palette. It implements a ColorCommands class that provides color selection commands, using fuzzy matching for search functionality.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0.37.0.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
class ColorCommands(Provider):
    """A command provider to select colors."""

    async def search(self, query: str) -> Hits:
        """Called for each key."""
        matcher = self.matcher(query)
        for color in COLOR_NAME_TO_RGB.keys():
            score = matcher.match(color)
            if score > 0:
                yield Hit(
                    score,
                    matcher.highlight(color),
                    partial(self.app.post_message, SwitchColor(color)),
                )
```

----------------------------------------

TITLE: Utility Containers Example in Textual
DESCRIPTION: Demonstrates use of built-in container widgets (Vertical, Horizontal) to create complex layouts like 2x2 grids.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/layout/utility_containers.py"
```

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/layout/utility_containers.tcss"
```

----------------------------------------

TITLE: Custom Key Method Handling in Textual
DESCRIPTION: Demonstrates implementing a custom key handler method for the space key that triggers a terminal bell.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/input.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/input/key02.py"
```

----------------------------------------

TITLE: Recomposing a Widget on Reactive Attribute Change - Python
DESCRIPTION: This example demonstrates how to use `recompose=True` to refresh a widget by removing all child widgets and calling `compose()` again when the `who` reactive attribute changes. This approach creates a new set of child widgets instead of updating existing ones.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_13

LANGUAGE: Python
CODE:
```
class RefreshApp(App):

    BINDINGS = [("p", "toggle_name", "Toggle Name")]

    who = reactive("World", recompose=True)

    def compose(self) -> ComposeResult:
        yield Label(f"Hello, {self.who}!", id="greeting")

    def action_toggle_name(self) -> None:
        self.who = "Textual" if self.who == "World" else "World"
```

----------------------------------------

TITLE: Querying the Entire Screen in Textual
DESCRIPTION: Demonstrates how to search the entire DOM by calling query_one on the Screen instance.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
self.screen.query_one("#send-email")
```

----------------------------------------

TITLE: Implementing Docked Widgets in Textual
DESCRIPTION: Demonstrates docking widgets to screen edges using the dock CSS property. Examples include creating fixed sidebars and headers.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_10

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/layout/dock_layout3_sidebar_header.py"
```

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/layout/dock_layout3_sidebar_header.tcss"
```

----------------------------------------

TITLE: Installing Textual App with Pipx
DESCRIPTION: This command installs a Textual application using Pipx, which creates an isolated virtual environment to prevent dependency conflicts with other Python packages. It installs the specified application and its dependencies within this environment.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#_snippet_19

LANGUAGE: bash
CODE:
```
pipx install textual_calculator
```

----------------------------------------

TITLE: TabbedContent Widget Implementation in Textual
DESCRIPTION: Demonstrates combined tabs and content switching functionality.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_28

LANGUAGE: textual
CODE:
```
docs/examples/widgets/tabbed_content.py
```

----------------------------------------

TITLE: Updating Placeholder Render on Variant Change in Python
DESCRIPTION: This code shows how the Placeholder widget updates its render when the variant changes, using a reactive attribute and a watcher method.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/placeholder-pr.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
class Placeholder(Static):
    # ...
    variant = reactive("default")
    # ...
    def watch_variant(
        self, old_variant: PlaceholderVariant, variant: PlaceholderVariant
    ) -> None:
        self.validate_variant(variant)
        self.remove_class(f"-{old_variant}")
        self.add_class(f"-{variant}")
        self.call_variant_update()  # <-- let this method do the heavy lifting!
```

----------------------------------------

TITLE: Configuring Python Logging with Textual Handler
DESCRIPTION: Shows how to configure Python's built-in logging module to use Textual's logging handler for integration with the debug console.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_17

LANGUAGE: python
CODE:
```
import logging
from textual.app import App
from textual.logging import TextualHandler

logging.basicConfig(
    level="NOTSET",
    handlers=[TextualHandler()],
)


class LogApp(App):
    """Using logging with Textual."""

    def on_mount(self) -> None:
        logging.debug("Logged via TextualHandler")


if __name__ == "__main__":
    LogApp().run()
```

----------------------------------------

TITLE: Textual CSS Color Usage Examples
DESCRIPTION: Examples of different ways to specify colors in Textual CSS, including named colors, variables, and HSL format.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/color.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
Header {
    background: red;           /* Color name */
}

.accent {
    color: $accent;            /* Textual variable */
}

#footer {
    tint: hsl(300, 20%, 70%);  /* HSL description */
}
```

----------------------------------------

TITLE: Button Widget Styling - CSS
DESCRIPTION: CSS styling rules for the button widget defining its appearance and variants.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/button.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/widgets/button.tcss"
```

----------------------------------------

TITLE: Implementing a Static Widget Example (Python)
DESCRIPTION: Provides the reference to the Python source code for a simple Textual application utilizing the `Static` widget. The `--8<--` directive includes the actual code from the specified file path (`docs/examples/widgets/static.py`), which defines the application structure and how the `Static` widget is used.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/static.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
```python
--8<-- "docs/examples/widgets/static.py"
```
```

----------------------------------------

TITLE: Implementing a Textual App with Multiple Screens
DESCRIPTION: A Python class implementation of a Textual app called GridInfo that displays Second Life grid information. This demonstrates a pattern of using multiple screens in a Textual application rather than using the default screen.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/on-dog-food-the-original-metaverse-and-not-being-bored.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
class GridInfo( App[ None ] ):
    """TUI app for showing information about the Second Life grid."""

    CSS_PATH = "gridinfo.css"
    """The name of the CSS file for the app."""

    TITLE = "Grid Information"
    """str: The title of the application."""

    SCREENS = {
        "main": Main,
        "region": RegionInfo
    }
    """The collection of application screens."""

    def on_mount( self ) -> None:
        """Set up the application on startup."""
        self.push_screen( "main" )
```

----------------------------------------

TITLE: Grid Size CSS Basic Examples
DESCRIPTION: Examples showing how to set grid dimensions using CSS syntax, demonstrating both fixed row count and auto-row scenarios
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_size.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
/* Grid with 3 columns and 5 rows */
grid-size: 3 5;

/* Grid with 4 columns and as many rows as needed */
grid-size: 4;
```

----------------------------------------

TITLE: Styling Text Alignment in Textual CSS
DESCRIPTION: CSS file highlighting different text alignment styles (left, center, right, justify) for Textual widgets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_align.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/text_align.tcss"
```

----------------------------------------

TITLE: Creating a Widget with 50% Screen Height in Python
DESCRIPTION: Example of creating a widget with a height of 50% of the screen using Python in Textual. This snippet is part of a larger example demonstrating basic usage of the height style.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/height.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/height.py"
```

----------------------------------------

TITLE: Importing and Using Label Widget in Python
DESCRIPTION: Example showing how to use the Label widget for displaying text in a Textual application. This code demonstrates basic Label widget implementation.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/label.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/label.py"
```

----------------------------------------

TITLE: Applying Text Colors in Textual CSS
DESCRIPTION: Shows how to apply different text colors to widgets using Textual CSS, highlighting the relevant lines.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/color.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/color.tcss"
```

----------------------------------------

TITLE: Constructing a Strip from Segments
DESCRIPTION: This code shows how to construct a Strip object from a list of Segment objects. It creates a strip that displays the text "Hello, World!", with the word "World" in bold.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_21

LANGUAGE: Python
CODE:
```
segments = [
    Segment("Hello, "),
    Segment("World", Style(bold=True)),
    Segment("!")
]
strip = Strip(segments)
```

LANGUAGE: Python
CODE:
```
strip = Strip(segments, 13)
```

----------------------------------------

TITLE: Full Position Example with TCSS
DESCRIPTION: Complete example of position styling using Textual CSS (TCSS) file to define position rules.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/position.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/position.tcss"
```

----------------------------------------

TITLE: Creating a TextArea with 'dracula' Theme (Python)
DESCRIPTION: Initializes a code editor-ready TextArea widget with preset options: code content, language highlighting set to 'python', and using the 'dracula' color theme. Uses the convenience constructor 'TextArea.code_editor', which typically disables soft-wrapping and enables line numbers. The call should be part of a generator (e.g., in a textual app's compose method) using 'yield'.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
# Create a TextArea with the 'dracula' theme.\nyield TextArea.code_editor(\"print(123)\", language=\"python\", theme=\"dracula\")
```

----------------------------------------

TITLE: Installing Textual and Developer Tools in Bash
DESCRIPTION: Command for installing both the core Textual library and the developer tools packages. This is now the recommended approach for developers building Textual applications.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-29-0.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pip install textual textual-dev
```

----------------------------------------

TITLE: Applying Grid-rows Style in Textual CSS
DESCRIPTION: Shows how to apply the grid-rows style in a Textual CSS file, highlighting the line that sets the row heights.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_rows.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/grid_rows.tcss"
```

----------------------------------------

TITLE: Adding Borders to Widgets
DESCRIPTION: Example of adding a border around a widget with specified style and color.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_10

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/styles/border01.py"
```

----------------------------------------

TITLE: Key Bindings with Actions
DESCRIPTION: Demonstrates binding keyboard keys to action methods for color changes.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/actions.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/actions/actions04.py"
```

----------------------------------------

TITLE: Setting Text Color in Python for Textual Widgets
DESCRIPTION: Shows how to set text color for Textual widgets in Python, using both string syntax and Color objects.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/color.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
# Set blue text
widget.styles.color = "blue"

from textual.color import Color
# Set with a color object
widget.styles.color = Color.parse("pink")
```

----------------------------------------

TITLE: CSS Examples for Color Style in Textual
DESCRIPTION: Provides various CSS examples for setting text color, including solid colors, opacity, RGB values, and auto contrast.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/color.md#2025-04-22_snippet_5

LANGUAGE: css
CODE:
```
/* Blue text */
color: blue;

/* 20% red text */
color: red 20%;

/* RGB color */
color: rgb(100, 120, 200);

/* Automatically choose color with suitable contrast for readability */
color: auto;
```

----------------------------------------

TITLE: Thread-based Weather App - Python
DESCRIPTION: Weather app implementation using thread workers with urllib for non-async network requests.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/workers.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/workers/weather05.py"
```

----------------------------------------

TITLE: Setting Grid Gutter in CSS
DESCRIPTION: Provides examples of setting grid gutters in CSS, including setting equal gutters and different vertical and horizontal gutters.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_gutter.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
/* Set vertical and horizontal gutters to be the same */
grid-gutter: 5;

/* Set vertical and horizontal gutters separately */
grid-gutter: 1 2;
```

----------------------------------------

TITLE: Tree Widget Implementation in Textual
DESCRIPTION: Demonstrates a tree control with expandable node functionality.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_30

LANGUAGE: textual
CODE:
```
docs/examples/widgets/tree.py
```

----------------------------------------

TITLE: Applying Max-Height in Textual CSS
DESCRIPTION: A Textual CSS file showing how to apply max-height to different placeholders, with highlighted lines indicating the max-height properties.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/max_height.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/max_height.tcss"
```

----------------------------------------

TITLE: Defining min-width in CSS for Textual
DESCRIPTION: Examples of setting min-width in CSS for Textual widgets. Shows how to set a minimum width in rows and as a percentage of viewport width.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/min_width.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
/* Set the minimum width to 10 rows */
min-width: 10;

/* Set the minimum width to 25% of the viewport width */
min-width: 25vw;
```

----------------------------------------

TITLE: TimeDisplay Widget from Textual Tutorial
DESCRIPTION: Code from the Textual tutorial showing how the TimeDisplay widget updates automatically using reactive attributes, interval timers, and watch methods to display elapsed time.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/spinners-and-pbs-in-textual.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
from time import monotonic

from textual.reactive import reactive
from textual.widgets import Static


class TimeDisplay(Static):
    """A widget to display elapsed time."""

    start_time = reactive(monotonic)
    time = reactive(0.0)
    total = reactive(0.0)

    def on_mount(self) -> None:
        """Event handler called when widget is added to the app."""
        self.update_timer = self.set_interval(1 / 60, self.update_time, pause=True)

    def update_time(self) -> None:
        """Method to update time to current."""
        self.time = self.total + (monotonic() - self.start_time)

    def watch_time(self, time: float) -> None:
        """Called when the time attribute changes."""
        minutes, seconds = divmod(time, 60)
        hours, minutes = divmod(minutes, 60)
        self.update(f"{hours:02,.0f}:{minutes:02.0f}:{seconds:05.2f}")
```

----------------------------------------

TITLE: Running Pytest for Snapshot Tests in Command Line
DESCRIPTION: This command runs pytest to execute the snapshot tests. When run for the first time, it generates an SVG screenshot and fails the test as there's no previous version to compare.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/testing.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
pytest
```

----------------------------------------

TITLE: Declaring an Asynchronous Worker in Textual
DESCRIPTION: Example showing how to declare an asynchronous worker in Textual using the @work decorator without threading, which requires the function to be declared as async.
SOURCE: https://github.com/textualize/textual/blob/main/docs/FAQ.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
@work()
async def run_in_background():
    ...
```

----------------------------------------

TITLE: Defining Margin Syntax in CSS
DESCRIPTION: Shows the syntax for defining margins in CSS, including single-value, two-value, and four-value notations, as well as individual margin properties.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/margin.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
margin: <integer>
      # one value for all edges
      | <integer> <integer>
      # top/bot   left/right
      | <integer> <integer> <integer> <integer>;
      # top       right     bot       left

margin-top: <integer>;
margin-right: <integer>;
margin-bottom: <integer>;
margin-left: <integer>;
```

----------------------------------------

TITLE: Styling Individual Widgets in Textual Python Application
DESCRIPTION: This example shows how to apply styles to a specific widget in a Textual application. It sets the background color to dark blue and adds a white heavy border to a Static widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static

class StylesApp(App):
    def compose(self) -> ComposeResult:
        self.static = Static("Textual")
        yield self.static

    def on_mount(self) -> None:
        self.static.styles.background = "darkblue"
        self.static.styles.border = ("heavy", "white")

if __name__ == "__main__":
    app = StylesApp()
    app.run()
```

----------------------------------------

TITLE: CSS Selector Example
DESCRIPTION: This CSS selector targets the Textual widget defined by the Python class `Header`. Styles within this rule set will be applied to all Header widgets in the application.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_1

LANGUAGE: css
CODE:
```
Header {
  dock: top;
  height: 3;
  content-align: center middle;
  background: blue;
  color: white;
}
```

----------------------------------------

TITLE: Defining Display Style in CSS
DESCRIPTION: Shows how to set the display style in CSS to either show or hide a widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/display.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
/* Widget is shown */
display: block;

/* Widget is not shown */
display: none;
```

----------------------------------------

TITLE: Styling Advanced Docking Example with CSS in Textual
DESCRIPTION: Shows the CSS styling for the advanced docking example, highlighting the lines where 'dock' properties are set for different edges.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/dock.md#2025-04-22_snippet_4

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/dock_all.tcss"
```

----------------------------------------

TITLE: Setting Grid Row Heights in CSS
DESCRIPTION: Provides examples of setting grid row heights using CSS, including fixed percentages and fractional units.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_rows.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
/* Set all rows to have 50% height */
grid-rows: 50%;

/* Every other row is twice as tall as the first one */
grid-rows: 1fr 2fr;
```

----------------------------------------

TITLE: Filling DataTable with Data using Textual (Python)
DESCRIPTION: This snippet demonstrates how to initialize a DataTable widget, add columns for lane, swimmer, country, and time, then populate it with row data using the add_rows method. Requires the Textual package (widgets.DataTable) and is meant to be used in a terminal UI application built with Textual. Inputs are lists of column headers and row values; the output is an interactive table rendered in the textual interface. All operations—including column and row addition—must be performed on a DataTable instance prior to rendering.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
```python\n--8<-- \"docs/examples/widgets/data_table.py\"\n```
```

----------------------------------------

TITLE: Creating a Segment with Style
DESCRIPTION: This code demonstrates how to create a Segment object with a Style to format text. It creates a segment that displays the text "Hello, World!" in bold.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_20

LANGUAGE: Python
CODE:
```
greeting = Segment("Hello, World!", Style(bold=True))
```

----------------------------------------

TITLE: Waiting for Screen Results in Python using Textual
DESCRIPTION: This example demonstrates how to use push_screen_wait() to ask a question and wait for the user's response. It uses a worker to prevent blocking the app while waiting for the screen result.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.containers import Center
from textual.screen import Screen
from textual.widgets import Button, Label
from textual.worker import Worker, get_current_worker

class QuestionScreen(Screen[bool]):
    def __init__(self, question: str):
        self.question = question
        super().__init__()

    def compose(self) -> ComposeResult:
        yield Center(
            Label(self.question),
            Button("Yes", id="yes", variant="success"),
            Button("No", id="no", variant="error"),
        )

    def on_button_pressed(self, event: Button.Pressed) -> None:
        if event.button.id == "yes":
            self.dismiss(True)
        else:
            self.dismiss(False)

class QuestionApp(App[None]):
    CSS_PATH = "questions01.tcss"

    def compose(self) -> ComposeResult:
        yield Label()

    @work
    async def on_mount(self) -> None:
        label = self.query_one(Label)
        worker = get_current_worker()
        result = await self.push_screen_wait(QuestionScreen("Do you like Python?"))
        label.update(f"You answered {'yes' if result else 'no'}")

if __name__ == "__main__":
    app = QuestionApp()
    app.run()
```

----------------------------------------

TITLE: Applying Horizontal Alignment in CSS
DESCRIPTION: This CSS snippet demonstrates how to use the align-horizontal property to align content to the right in a container element.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/horizontal.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
.container {
    align-horizontal: right;
}
```

----------------------------------------

TITLE: Example Layout Styling in CSS
DESCRIPTION: A CSS file showing how to style layouts in a Textual application. It includes highlighted lines that are likely crucial for layout definition.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layout.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/layout.tcss"
```

----------------------------------------

TITLE: Applying Text Styles in Textual CSS
DESCRIPTION: This CSS snippet demonstrates how to apply different text styles to widgets in Textual. It shows three different styles: bold, italic, and reverse.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_style.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
#panel-1 {
    background: orange;
    text-style: bold;
}

#panel-2 {
    background: skyblue;
    text-style: italic;
}

#panel-3 {
    background: violet;
    text-style: reverse;
}
```

----------------------------------------

TITLE: Input Types Example - Python
DESCRIPTION: Shows how to use different input types (integer, number, text) with the Input widget for type-specific validation.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/input.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/input_types.py"
```

----------------------------------------

TITLE: Applying Text Styles in CSS for Textual
DESCRIPTION: Demonstrates how to apply text styles using CSS in Textual. Shows examples of applying a single style and combining multiple styles.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/text_style.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
#label1 {
    /* You can specify any value by itself. */
    rule: strike;
}

#label2 {
    /* You can also combine multiple values. */
    rule: strike bold italic reverse;
}
```

----------------------------------------

TITLE: Handling SelectionList Selection Changes in Python
DESCRIPTION: References the Python code demonstrating how to react to changes in the selected items of a `SelectionList`. It typically involves watching for the `SelectionList.SelectedChanged` message and implementing a handler method (e.g., `on_selection_list_selected_changed`) to update another widget (like `Pretty`) with the current selection. The actual code is included from the specified file path (`docs/examples/widgets/selection_list_selected.py`). Note the type hint `SelectionList[str]` matching the string values used in this example.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
~~~python
--8<-- "docs/examples/widgets/selection_list_selected.py"
~~~
```

----------------------------------------

TITLE: CSS Basic Padding Examples
DESCRIPTION: Examples of setting padding using different CSS syntax variations. Shows how to set padding for all edges, top/bottom and left/right pairs, and individual edge specifications.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/padding.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
/* Set padding of 1 around all edges */
padding: 1;
/* Set padding of 2 on the top and bottom edges, and 4 on the left and right */
padding: 2 4;
/* Set padding of 1 on the top, 2 on the right,
                 3 on the bottom, and 4 on the left */
padding: 1 2 3 4;

padding-top: 1;
padding-right: 2;
padding-bottom: 3;
padding-left: 4;
```

----------------------------------------

TITLE: Displaying Notifications in Textual 0.30.0 (Python)
DESCRIPTION: Demonstrates how to use the new notify() method to display a notification in Textual 0.30.0. The method takes a message and an optional title as parameters.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-30-0.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
def on_mount(self) -> None:
    self.notify("Hello, from Textual!", title="Welcome")
```

----------------------------------------

TITLE: Basic CSS Visibility Example
DESCRIPTION: Demonstrates basic visibility control in TCSS with highlighted visibility property.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/visibility.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
/* Widget is invisible */
visibility: hidden;

/* Widget is visible */
visibility: visible;
```

----------------------------------------

TITLE: Width Python Examples
DESCRIPTION: Examples of setting widget width using Python styles API.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/width.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
widget.styles.width = 10
widget.styles.width = "50%
widget.styles.width = "auto"
```

----------------------------------------

TITLE: Setting Right Text Alignment in Python
DESCRIPTION: Python example demonstrating how to set text alignment to right for a widget in Textual using the styles attribute.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_align.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
# Set text in the widget to be right aligned
widget.styles.text_align = "right"
```

----------------------------------------

TITLE: Defining Max-width in CSS Syntax
DESCRIPTION: Shows the basic syntax for defining max-width property in CSS, accepting a scalar value that sets the upper bound for widget width.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/max_width.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
max-width: <scalar>;
```

----------------------------------------

TITLE: Combined Style Tags Example
DESCRIPTION: Example showing how to combine multiple style tags for complex formatting.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_4

LANGUAGE: markup
CODE:
```
[bold]Bold [italic]Bold and italic[/italic][/bold]
```

----------------------------------------

TITLE: Basic Key Event Handling in Python with Textual
DESCRIPTION: Example showing how to handle keyboard events in a Textual application using a RichLog widget to display key presses.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/input.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/input/key01.py"
```

----------------------------------------

TITLE: Creating Click Actions in Textual
DESCRIPTION: Demonstrates how to create clickable actions using the @click markup syntax
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_6

LANGUAGE: markup
CODE:
```
Play the [@click=app.bell]bell[/]
```

----------------------------------------

TITLE: Applying CSS Types in Textual Python Code
DESCRIPTION: This example demonstrates how to set CSS type values programmatically in Python when working with Textual widgets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/_template.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.rule = type_value_1
widget.styles.rule = type_value_2
widget.styles.rule = type_value_3
```

----------------------------------------

TITLE: Input Focus Management in Textual
DESCRIPTION: Implementation showing how to manage input focus across multiple RichLog widgets with both Python and CSS styling.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/input.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/input/key03.py"
```

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/input/key03.tcss"
```

----------------------------------------

TITLE: Styling Buttons within a Dialog
DESCRIPTION: This CSS rule makes the text of buttons within a widget with the ID 'dialog' bold. It uses the descendant combinator to target buttons that are descendants of the dialog widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_16

LANGUAGE: css
CODE:
```
#dialog Button {
  text-style: bold;
}
```

----------------------------------------

TITLE: Implementing Footer Widget Example in Python
DESCRIPTION: Example code demonstrating the implementation and usage of the Footer widget in a Textual application.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/footer.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/footer.py"
```

----------------------------------------

TITLE: Installing Textual Developer Tools
DESCRIPTION: Installation command for Textual development tools package.
SOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
pip install textual-dev
```

----------------------------------------

TITLE: Rich Renderables Example
DESCRIPTION: Complete example showing how to use Rich renderables in a Textual application
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_16

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/content/renderables.py"
```

----------------------------------------

TITLE: Using Auto Height for Widgets in Textual Python
DESCRIPTION: This example shows how to use 'auto' height for a widget to adapt to its content. It creates a Static widget with a fixed width and auto height to accommodate all the text.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static

LOREM_IPSUM = """Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."""

class DimensionsApp(App):
    def compose(self) -> ComposeResult:
        yield Static(LOREM_IPSUM, id="lorem")

    def on_mount(self) -> None:
        lorem = self.query_one("#lorem")
        lorem.styles.width = 20
        lorem.styles.height = "auto"

if __name__ == "__main__":
    app = DimensionsApp()
    app.run()
```

----------------------------------------

TITLE: Setting Text Styles in Python for Textual
DESCRIPTION: Shows how to set text styles programmatically in Python when using Textual. Includes examples of setting a single style and combining multiple styles.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/text_style.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
# You can specify any value by itself
widget.styles.text_style = "strike"

# You can also combine multiple values
widget.styles.text_style = "strike bold italic reverse
```

----------------------------------------

TITLE: Setting Screen Styles in Textual Python Application
DESCRIPTION: This snippet demonstrates how to set background color and border styles for the screen in a Textual application. It changes the background to dark blue and adds a white heavy border.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Footer

class StylesApp(App):
    def compose(self) -> ComposeResult:
        self.screen.styles.background = "darkblue"
        self.screen.styles.border = ("heavy", "white")
        yield Footer()

if __name__ == "__main__":
    app = StylesApp()
    app.run()
```

----------------------------------------

TITLE: Adjusting Row Heights in Textual Grid
DESCRIPTION: Shows how to set row heights using percentage values, with the first row taking 25% and second row taking 75% of the available height.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_5

LANGUAGE: css
CODE:
```
hl_lines="5"
--8<-- "docs/examples/guide/layout/grid_layout4_row_col_adjust.tcss"
```

----------------------------------------

TITLE: Wildcard Event Handler in Textual
DESCRIPTION: Shows how to create a handler that responds to any event of a specific type from any widget by using the '*' wildcard in the decorator.
SOURCE: https://github.com/textualize/textual/blob/main/docs/api/on.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
@on(Button.Pressed, "*")
def on_any_button_pressed(self, event: Button.Pressed) -> None:
    self.log(f"Button {event.button} was pressed")

```

----------------------------------------

TITLE: Applying border styles with Python in Textual
DESCRIPTION: Python example demonstrating how to set border styles programmatically on widgets, showing both full border styling and individual border edge styling.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/border.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
widget.styles.border = ("heavy", "red")
widget.styles.border_bottom = ("solid", "blue")
```

----------------------------------------

TITLE: Column Spanning in Textual Grid
DESCRIPTION: Shows how to make a cell span multiple columns using column-span CSS property. The example makes the second widget span two columns with a magenta tint.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/layout/grid_layout5_col_span.py"
```

LANGUAGE: css
CODE:
```
hl_lines="6-9"
--8<-- "docs/examples/guide/layout/grid_layout5_col_span.tcss"
```

----------------------------------------

TITLE: Margin Property Examples in CSS
DESCRIPTION: Examples of using the margin property in CSS, including single-value, two-value, and four-value notations, as well as individual margin properties.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/margin.md#2025-04-22_snippet_6

LANGUAGE: css
CODE:
```
/* Set margin of 1 around all edges */
margin: 1;
/* Set margin of 2 on the top and bottom edges, and 4 on the left and right */
margin: 2 4;
/* Set margin of 1 on the top, 2 on the right,
                 3 on the bottom, and 4 on the left */
margin: 1 2 3 4;

margin-top: 1;
margin-right: 2;
margin-bottom: 3;
margin-left: 4;
```

----------------------------------------

TITLE: Handling Custom Messages in Textual Main Screen (Python)
DESCRIPTION: Demonstrates how to handle custom messages in the Main screen of a Textual application. This example shows reacting to an Activity.Moved message to save the updated activity list.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/on-dog-food-the-original-metaverse-and-not-being-bored.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
def on_activity_moved( self, _: Activity.Moved ) -> None:
    """React to an activity being moved."""
    self.save_activity_list()
```

----------------------------------------

TITLE: Border Styles Example Python Implementation
DESCRIPTION: Main Python implementation showing border application on multiple widgets with different styles.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/border.py"
```

----------------------------------------

TITLE: Installing Textual Syntax Highlighting Dependencies (pip) - Shell
DESCRIPTION: Installs extra dependencies required for syntax highlighting in the Textual TextArea widget, specifically 'tree-sitter' and 'tree-sitter-languages'. Run with pip in your terminal. The 'textual[syntax]' extra enables advanced highlighting, but may have platform compatibility constraints when binary wheels for dependencies are unavailable.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
pip install \"textual[syntax]\"
```

----------------------------------------

TITLE: Clock without Recompose - Python
DESCRIPTION: This example shows a clock implemented without recompose. It updates the time every second by refreshing the Digits widget and formatting the time in both the `compose()` method and the `watch_time()` method.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_15

LANGUAGE: Python
CODE:
```
class Digits(Widget):
    
```

----------------------------------------

TITLE: Basic Margin Styling in CSS
DESCRIPTION: CSS styles for the basic margin usage example, highlighting the margin property.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/margin.md#2025-04-22_snippet_4

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/margin.tcss"
```

----------------------------------------

TITLE: Setting Width in CSS Syntax
DESCRIPTION: Basic CSS syntax for setting widget width using scalar values.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/width.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
width: <scalar>;
```

----------------------------------------

TITLE: Basic usage of Rich's inspect function with a file object
DESCRIPTION: Demonstrates the basic usage of Rich's inspect function to examine a Python file object. This snippet shows how to import the inspect function and use it to get a nicely formatted report of an object's properties.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/rich-inspect.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
>>> from rich import inspect
>>> text_file = open("foo.txt", "w")
>>> inspect(text_file)
```

----------------------------------------

TITLE: Composing Collapsible Content via Constructor (Python)
DESCRIPTION: Demonstrates adding a `Label` widget as a child to a `Collapsible` widget by passing it directly during instantiation within a Textual `compose` method. This method is suitable for simple content.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
```python
def compose(self) -> ComposeResult:
    yield Collapsible(Label("Hello, world."))
```
```

----------------------------------------

TITLE: Setting Text Colors for Multiple Widgets in Python
DESCRIPTION: Demonstrates setting different text colors for three widgets in a Textual application using Python.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/color.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/color.py"
```

----------------------------------------

TITLE: Configuring DataTable Cursors for Navigation in Textual (Python)
DESCRIPTION: This snippet illustrates how to use various cursor types (cell, row, column, none) in a DataTable, and how events are emitted as the user navigates via the keyboard or mouse. The example depends on a DataTable instance and shows changing cursor_type and reading cursor_coordinate for handling selection and highlighting. Input includes user navigation actions; output includes corresponding event messages. The approach lets you build interactive, user-driven tables responding to both keyboard and mouse input.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
```python\n--8<-- \"docs/examples/widgets/data_table_cursors.py\"\n```
```

----------------------------------------

TITLE: World Clock App CSS Styling
DESCRIPTION: This CSS styles the WorldClock application, setting the layout and appearance of the timezone and time display elements.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_23

LANGUAGE: css
CODE:
```
Horizontal {
    width: auto;
}

WorldClock {
    width: auto;
    height: auto;
    border: tall $panel;
    padding: 1;
    margin-right: 1;
}

WorldClock > .timezone {
    width: auto;
    text-align: center;
    text-style: bold;
}

TimeDisplay {
    width: auto;
    text-align: center;
}
```

----------------------------------------

TITLE: Centering Multiple Widgets Independently using Center Container in Python
DESCRIPTION: This snippet showcases how to center multiple widgets independently using the Center container in Textual. It wraps two Static widgets in separate Center containers to align them individually.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/center-things.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.containers import Center
from textual.widgets import Static

class CenterApp(App):
    def compose(self) -> ComposeResult:
        yield Center(Static("Widget 1"))
        yield Center(Static("Widget 2"))

    CSS = """
    Static {
        width: auto;
        height: auto;
        background: blue;
        color: white;
        border: solid white;
        padding: 1 2;
    }

    Center {
        height: 1fr;
    }
    """

if __name__ == "__main__":
    app = CenterApp()
    app.run()
```

----------------------------------------

TITLE: Container Visibility Styles
DESCRIPTION: CSS styles for container visibility example showing inheritance and override patterns.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/visibility.md#2025-04-22_snippet_4

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/visibility_containers.tcss"
```

----------------------------------------

TITLE: Setting Text Overflow in Python for Textual
DESCRIPTION: This Python snippet shows how to programmatically set the text-overflow style for a widget in Textual. It sets the value to 'ellipsis', which truncates overflowing text and adds an ellipsis at the end.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_overflow.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.text_overflow = "ellipsis" 
```

----------------------------------------

TITLE: Basic Action Method Implementation
DESCRIPTION: Demonstrates creating a simple action method to set background color with a key binding.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/actions.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/actions/actions01.py"
```

----------------------------------------

TITLE: Using Display Property Shortcut in Python
DESCRIPTION: Shows a shortcut method to show or hide a widget using the 'display' property in Python.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/display.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
# Hide the widget
widget.display = False

# Show the widget
widget.display = True
```

----------------------------------------

TITLE: Changing Theme for an Existing TextArea Instance - Python
DESCRIPTION: Assigns a new theme (here, 'vscode_dark') to an existing TextArea instance. By setting the 'theme' attribute, the component will refresh its display, updating syntax highlighting and style according to the theme definition. The theme string must match one available from 'available_themes' or those registered via custom themes.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
text_area.theme = \"vscode_dark\"
```

----------------------------------------

TITLE: Container Visibility Example
DESCRIPTION: Full Python example showing visibility inheritance between containers and child widgets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/visibility.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/visibility_containers.py"
```

----------------------------------------

TITLE: Custom Widget Actions
DESCRIPTION: Shows how to implement actions in a custom widget with its own namespace.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/actions.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/actions/actions05.py"
```

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/actions/actions05.tcss"
```

----------------------------------------

TITLE: Implementing Await-Me-Maybe Pattern in Python
DESCRIPTION: Demonstrates how to create a function that can handle both synchronous and asynchronous callbacks using the 'Await me maybe' pattern. This allows framework users to write either regular functions or coroutines as callbacks.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/await-me-maybe.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
import asyncio
import inspect


def plain_old_function():
    return "Plain old function"

async def async_function():
    return "Async function"


async def await_me_maybe(callback):
    result = callback()
    if inspect.isawaitable(result):
        return await result
    return result


async def run_framework():
    print(
        await await_me_maybe(plain_old_function)
    )
    print(
        await await_me_maybe(async_function)
    )


if __name__ == "__main__":
    asyncio.run(run_framework())
```

----------------------------------------

TITLE: BitSwitch, ByteInput, and ByteEditor Widget Composition
DESCRIPTION: This code demonstrates the basic structure and composition of the BitSwitch, ByteInput, and ByteEditor widgets in Textual, without any functional behavior. It shows how these widgets are composed of labels, switches, and input fields to create a byte editor interface.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_26

LANGUAGE: python
CODE:
```
    --8<-- "docs/examples/guide/compound/byte01.py"
```

----------------------------------------

TITLE: Importing Textual Renderables in Python
DESCRIPTION: This snippet shows how to import various renderables from the textual.renderables module. These renderables can be used in a widget's render() method to create rich visual elements.
SOURCE: https://github.com/textualize/textual/blob/main/docs/api/renderables.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
from textual.renderables import bar, blank, digits, gradient, sparkline
```

----------------------------------------

TITLE: Running Textual Demo
DESCRIPTION: This command runs the built-in Textual demo, showcasing various features and capabilities of the framework.
SOURCE: https://github.com/textualize/textual/blob/main/README.md#2025-04-22_snippet_2

LANGUAGE: bash
CODE:
```
python -m textual
```

----------------------------------------

TITLE: Comprehensive Margin Settings Example in Python
DESCRIPTION: A more complex Python script showcasing various margin settings in a grid layout using Textual.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/margin.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/margin_all.py"
```

----------------------------------------

TITLE: Styling a Widget's Base Class
DESCRIPTION: This CSS code styles all `Static` widgets with a blue background and a round green border. Because `Alert` extends `Static`, this style will also apply to `Alert` widgets unless overridden by a more specific selector.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_6

LANGUAGE: css
CODE:
```
Static {
  background: blue;
  border: round green;
}
```

----------------------------------------

TITLE: Modifying Multiple Widgets with Query Objects in Textual
DESCRIPTION: Demonstrates how to use query objects to modify multiple widgets without explicit loops, using methods like add_class.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_10

LANGUAGE: python
CODE:
```
self.query("Button").add_class("disabled")
```

----------------------------------------

TITLE: Defining Dock Styles in CSS for Textual
DESCRIPTION: Provides CSS code snippets for setting the 'dock' property to different edges (bottom, left, right, top) in Textual stylesheets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/dock.md#2025-04-22_snippet_5

LANGUAGE: css
CODE:
```
dock: bottom;  /* Docks on the bottom edge of the parent container. */
dock: left;    /* Docks on the   left edge of the parent container. */
dock: right;   /* Docks on the  right edge of the parent container. */
dock: top;     /* Docks on the    top edge of the parent container. */
```

----------------------------------------

TITLE: Implementing a Basic Textual Snapshot Test in Python using Pytest
DESCRIPTION: This Python snippet demonstrates how to write a simple snapshot test for a Textual application using the `pytest` framework. It defines a test function that accepts the `snap_compare` fixture. The test asserts the result of calling `snap_compare` with the path to a Textual app script, which triggers a comparison against a saved snapshot.
SOURCE: https://github.com/textualize/textual/blob/main/notes/snapshot_testing.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
def test_grid_layout_basic_overflow(snap_compare):
    assert snap_compare("docs/examples/guide/layout/grid_layout2.py")
```

----------------------------------------

TITLE: Setting Fixed Column Width and Tweet Height
DESCRIPTION: Sets a fixed width for the columns and a fixed height for the tweet placeholders. This demonstrates how to control the size of elements within the layout for a more structured appearance.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/design-a-layout.md#_snippet_5

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Header, Footer, HorizontalScroll, Placeholder, VerticalScroll


class Column(VerticalScroll):
    DEFAULT_CSS = """Column {width: 32;}"""


class Tweet(Placeholder):
    DEFAULT_CSS = """Tweet {height: 5;}"""


class ColumnsApp(App):
    CSS_PATH = "columns.tcss"
    BINDINGS = [("d", "toggle_dark", "Toggle dark mode")]

    def compose(self) -> ComposeResult:
        yield Header()
        yield Footer()
        with HorizontalScroll():
            with Column():
                for n in range(4):
                    yield Tweet(f"Tweet {n+1}")
            with Column():
                for n in range(2):
                    yield Tweet(f"Tweet {n+1}")
            with Column():
                for n in range(5):
                    yield Tweet(f"Tweet {n+1}")
            with Column():
                for n in range(3):
                    yield Tweet(f"Tweet {n+1}")


if __name__ == "__main__":
    app = ColumnsApp()
    app.run()
```

----------------------------------------

TITLE: Declaring an Asynchronous Worker in Textual (Python)
DESCRIPTION: This snippet shows how to define an asynchronous worker function in Textual. It uses the `@work` decorator (implicitly `thread=False`) and marks the function `run_in_background` with `async`. This indicates the function should run asynchronously within Textual's main event loop, cooperative multitasking rather than in a separate thread.
SOURCE: https://github.com/textualize/textual/blob/main/questions/worker-thread-error.question.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
@work()
async def run_in_background():
    ...
```

----------------------------------------

TITLE: Using a CSS Variable
DESCRIPTION: This CSS rule demonstrates how to use a previously defined CSS variable `$border` within a style declaration. The variable is substituted with its assigned value ('wide green') during rendering.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_21

LANGUAGE: css
CODE:
```
#foo {
  border: $border;
}
```

----------------------------------------

TITLE: Setting an Initial Active Tab (Textual, Python)
DESCRIPTION: Shows how to specify the initially active tab by passing the 'initial' argument, set to the desired TabPane's 'id', to the TabbedContent constructor. The code assigns clear 'id' values and ensures the UI highlights the specified tab ('jessica') on widget creation. The example depends on the Textual framework with TabbedContent, TabPane, and Markdown imported.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tabbed_content.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
def compose(self) -> ComposeResult:
    with TabbedContent(initial="jessica"):
        with TabPane("Leto", id="leto"):
            yield Markdown(LETO)
        with TabPane("Jessica", id="jessica"):
            yield Markdown(JESSICA)
        with TabPane("Paul", id="paul"):
            yield Markdown(PAUL)
```

----------------------------------------

TITLE: Creating Basic Snapshot Test for Textual App in Python
DESCRIPTION: This snippet demonstrates how to create a basic snapshot test for a Textual app using the snap_compare fixture. It specifies the path to the Python file containing the app relative to the test location.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/testing.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
def test_calculator(snap_compare):
    assert snap_compare("path/to/calculator.py")
```

----------------------------------------

TITLE: Action to Set Switch Value in Textual
DESCRIPTION: This Python code demonstrates an action within a Textual application that sets the value of a Switch widget to true (1). It uses query_one to select the Switch widget and then updates its value attribute.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_27

LANGUAGE: python
CODE:
```
def action_set_true(self):
    self.query_one(Switch).value = 1
```

----------------------------------------

TITLE: Styling Left-Docked Sidebar with CSS in Textual
DESCRIPTION: Provides the CSS styling for the left-docked sidebar example, highlighting the line where the 'dock' property is set to 'left'.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/dock.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/layout/dock_layout1_sidebar.tcss"
```

----------------------------------------

TITLE: Textual CSS Styling Example
DESCRIPTION: CSS styling example for a Textual application showing basic widget styling.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_10

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/app/question02.tcss"
```

----------------------------------------

TITLE: Running Setup Code Before Snapshot Capture in Textual App Test
DESCRIPTION: This snippet shows how to run arbitrary code before capturing the snapshot using the run_before parameter. It uses an async function to hover the mouse cursor over a specific widget before taking the snapshot.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/testing.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
def test_calculator_hover_number(snap_compare):
    async def run_before(pilot) -> None:
        await pilot.hover("#number-5")

    assert snap_compare("path/to/calculator.py", run_before=run_before)
```

----------------------------------------

TITLE: OptionList Widget Implementation in Textual
DESCRIPTION: Shows implementation of a vertical list of Rich-renderable options.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_15

LANGUAGE: textual
CODE:
```
docs/examples/widgets/option_list_options.py
```

----------------------------------------

TITLE: Styling Modal Screen in Textual CSS
DESCRIPTION: This CSS snippet provides styling for the modal screen in the Textual application. It sets the background, border, and padding for the modal overlay.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/screens.md#2025-04-22_snippet_5

LANGUAGE: css
CODE:
```
Screen {
    align: center middle;
}

#quit-screen {
    background: $boost;
    border: thick $background 80%;
    padding: 1 2;
}
```

----------------------------------------

TITLE: Fixing Rows and Columns in Place with DataTable in Textual (Python)
DESCRIPTION: This snippet illustrates pinning the top N rows and leftmost M columns in a DataTable by assigning integers to fixed_rows and fixed_columns. The fixed sections remain visible during scroll and cannot be moved by the user. Intended for use within a Textual DataTable context, it increases usability when working with large datasets. Requires the DataTable widget and suffices for spreadsheet-like fixed headings.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
```python\n--8<-- \"docs/examples/widgets/data_table_fixed.py\"\n```
```

----------------------------------------

TITLE: Implementing Basic Link Widget - Textual Python
DESCRIPTION: Example showing basic usage of the Link widget in a Textual application. The widget creates clickable text that opens URLs in a web browser when clicked.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/link.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/link.py"
```

----------------------------------------

TITLE: Defining Box-sizing Syntax in CSS
DESCRIPTION: Shows the CSS syntax for setting the box-sizing property. It can be set to either border-box or content-box.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/box_sizing.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
box-sizing: border-box | content-box;
```

----------------------------------------

TITLE: Removing a Row below Cursor in DataTable with Textual (Python)
DESCRIPTION: This snippet demonstrates deleting the row currently beneath the cursor in a DataTable. It uses coordinate_to_cell_key to map the cursor position to a row key, then calls remove_row with this key. Prerequisites: a DataTable instance with populated data and a valid cursor location. This method allows context-sensitive row deletion in response to navigation events, improving user interactivity. The expected input is the current cursor coordinate, and the table is mutated by row removal.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
```python\n# Get the keys for the row and column under the cursor.\nrow_key, _ = table.coordinate_to_cell_key(table.cursor_coordinate)\n# Supply the row key to `remove_row` to delete the row.\ntable.remove_row(row_key)\n```
```

----------------------------------------

TITLE: Styling Border Titles in Textual
DESCRIPTION: This CSS snippet styles the border of a Textual widget, including the color and height. It also sets the border style for the widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_9

LANGUAGE: css
CODE:
```
Hello {
    border: tall $primary;
    height: 5;
}
```

----------------------------------------

TITLE: Row Span Example Python
DESCRIPTION: Example Python implementation demonstrating row span usage in a Textual application with a 4x4 grid layout.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/row_span.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/row_span.py"
```

----------------------------------------

TITLE: DirectoryTree Widget Implementation in Textual
DESCRIPTION: Shows how to create a tree view of files and folders in the terminal.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_5

LANGUAGE: textual
CODE:
```
docs/examples/widgets/directory_tree.py
```

----------------------------------------

TITLE: Defining Grid-rows Syntax in Textual CSS
DESCRIPTION: Specifies the syntax for the grid-rows style in Textual CSS, using one or more scalar values to define row heights.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_rows.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
grid-rows: <scalar>+;
```

----------------------------------------

TITLE: Setting Widget Height to 50% in Textual CSS
DESCRIPTION: CSS example showing how to set a widget's height to 50% of its container in Textual. This is part of the basic usage example for the height style.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/height.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/height.tcss"
```

----------------------------------------

TITLE: Setting Dock Styles in Python for Textual Widgets
DESCRIPTION: Shows how to set the 'dock' style programmatically in Python for Textual widgets, demonstrating all four docking options.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/dock.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
widget.styles.dock = "bottom"  # Dock bottom.
widget.styles.dock = "left"    # Dock   left.
widget.styles.dock = "right"   # Dock  right.
widget.styles.dock = "top"     # Dock    top.
```

----------------------------------------

TITLE: Customizing Collapse/Expand Symbols (Python)
DESCRIPTION: Explains how to change the default triangle symbols used to indicate the collapsed and expanded states by setting the `collapsed_symbol` and `expanded_symbol` string parameters in the `Collapsible` constructor.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
```python
def compose(self) -> ComposeResult:
    with Collapsible(collapsed_symbol=">>>", expanded_symbol="v"):
        yield Label("Hello, world.")
```
```

----------------------------------------

TITLE: Button with Tooltip
DESCRIPTION: This example demonstrates how to add a tooltip to a button widget. The tooltip is set using the widget's tooltip property, which can accept text or any Rich renderable.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_16

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Header, Footer, Button


class TooltipApp(App):
    
```

----------------------------------------

TITLE: Implementing Scrolling in a Textual Widget (checker03.py)
DESCRIPTION: This example demonstrates how to add scrolling functionality to a Textual widget by extending the ScrollView class. It configures the virtual size of the scrollable content and updates the render_line method to account for scroll offsets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_23

LANGUAGE: python
CODE:
```
class Checkerboard(ScrollView):

    def __init__(self, board_size: int = 100) -> None:
        self.board_size = board_size
        super().__init__()

    def compose(self) -> ComposeResult:
        yield Static(f"{self.board_size=}", id="board_size")

    def on_mount(self) -> None:
        self.virtual_size = Size(self.board_size, self.board_size)

    def render_line(self, y: int) -> Strip:
        width = self.size.width
        board_size = self.board_size
        scroll_x, scroll_y = self.scroll_offset
        white = Style(bgcolor=Color.parse("white"))
        black = Style(bgcolor=Color.parse("black"))
        line = []
        for x in range(width):
            if (x + y + scroll_x + scroll_y) % 2 == 0:
                line.append((white, " "))
            else:
                line.append((black, " "))
        strip = Strip(line)
        return strip.crop(scroll_x, scroll_x + self.size.width)


class CheckerboardApp(App):
    CSS_PATH = "checker03.tcss"

    def compose(self) -> ComposeResult:
        yield Checkerboard(board_size=100)
```

----------------------------------------

TITLE: Referencing Example for Extending TextArea Key Handling in Python
DESCRIPTION: This snippet acts as a reference (using an include directive) to an external Python file (`docs/examples/widgets/text_area_extended.py`). The referenced file contains an example of subclassing `TextArea` to override the `_on_key` method, specifically to implement automatic closing of parentheses when '(' is typed.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_16

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/text_area_extended.py"
```

----------------------------------------

TITLE: Position Styles in CSS
DESCRIPTION: CSS syntax for setting position styles. Shows both relative and absolute positioning options.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/position.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
position: relative;
position: absolute;
```

----------------------------------------

TITLE: Typing Reactive Attributes
DESCRIPTION: This code shows how to add explicit type hints to reactive attributes, especially when the attribute type is a superset of the default type, such as making an attribute optional.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_2

LANGUAGE: Python
CODE:
```
name: reactive[str | None] = reactive("Paul")
```

----------------------------------------

TITLE: Initializing Hatch Project
DESCRIPTION: Initializes a Hatch project in the current directory for existing code. Replace `<YOUR PROJECT NAME>` with the actual project name.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#_snippet_4

LANGUAGE: Bash
CODE:
```
hatch new --init <YOUR PROJECT NAME>
```

----------------------------------------

TITLE: Implementing Fade Animation in Textual
DESCRIPTION: Example showing how to animate a Static widget's opacity from visible to invisible over 2 seconds. The code demonstrates the basic usage of Textual's animate method to create a fade-out effect.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/animation.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/animator/animation01.py"
```

----------------------------------------

TITLE: CSS Pseudo-class Hover Example
DESCRIPTION: This CSS rule uses the `:hover` pseudo-class to change the background color of a Button to green when the mouse cursor is over it.  Pseudo-classes allow styling widgets based on their state.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_15

LANGUAGE: css
CODE:
```
Button:hover {
  background: green;
}
```

----------------------------------------

TITLE: Validating Reactive Attribute Values in Textual (Python)
DESCRIPTION: This example demonstrates how to use validation methods (methods starting with `validate_`) to check and potentially modify the value assigned to a reactive attribute.  It restricts a count to a range between 0 and 10.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_8

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/reactivity/validate01.py"
```

----------------------------------------

TITLE: Comparing Different Height Units in Python
DESCRIPTION: Python code demonstrating the creation of widgets with various height units in Textual. This example showcases different ways to specify widget heights.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/height.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/height_comparison.py"
```

----------------------------------------

TITLE: Implementing Content Switching Interface with ContentSwitcher Widget in Python
DESCRIPTION: Sample implementation demonstrating how to use ContentSwitcher widget with buttons to create a tabbed interface. Shows button click handling and content switching based on widget IDs.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/content_switcher.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/content_switcher.py"
```

----------------------------------------

TITLE: ListView Widget Implementation in Textual
DESCRIPTION: Shows how to implement a list view that can display other widgets as items.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_9

LANGUAGE: textual
CODE:
```
docs/examples/widgets/list_view.py
```

----------------------------------------

TITLE: Serving Textual Apps in a Browser
DESCRIPTION: Shows how to serve a Textual app in a web browser using the 'serve' subcommand.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_6

LANGUAGE: bash
CODE:
```
textual serve my_app.py
```

----------------------------------------

TITLE: Dynamic Actions with Check Logic
DESCRIPTION: Implementation of dynamic actions with validation logic using check_action method.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/actions.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/actions/actions06.py"
```

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/actions/actions06.tcss"
```

----------------------------------------

TITLE: Checkerboard Widget with Line API in Textual
DESCRIPTION: This code implements a Textual widget that renders a checkerboard pattern using the line API. The render_line method calculates a Strip for each row, containing alternating black and white space characters. It demonstrates the use of Segment and Style objects to customize the appearance of the checkerboard squares.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_19

LANGUAGE: Python
CODE:
```
from textual.app import App, ComposeResult
from textual.widget import Widget
from textual.reactive import reactive
from textual.strip import Strip
from rich.style import Style
from rich.segment import Segment

class Checkerboard(Widget):

    DEFAULT_CSS = """
    Checkerboard {
        width: auto;
        height: auto;
    }
    """

    size = reactive(10)

    def render_line(self, y: int) -> Strip:
        
```

----------------------------------------

TITLE: Implementing Escape Key Bindings in Textual Widgets (Python)
DESCRIPTION: Demonstrates how to organize key bindings for the escape key across different widgets in a Textual application. This approach allows for context-specific behavior and better footer descriptions.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/on-dog-food-the-original-metaverse-and-not-being-bored.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
class Activity( Widget ):
    """A widget that holds and displays a suggested activity."""

    BINDINGS = [
        ...
        Binding( "escape", "deselect", "Switch to Types" )
    ]

...

class Filters( Vertical ):
    """Filtering sidebar."""

    BINDINGS = [
        Binding( "escape", "close", "Close Filters" )
    ]

...

class Main( Screen ):
    """The main application screen."""

    BINDINGS = [
        Binding( "escape", "quit", "Close" )
    ]
    """The bindings for the main screen."""
```

----------------------------------------

TITLE: Setting text-align in Python for Textual
DESCRIPTION: Example showing how to set text alignment to justify directly in Python code by accessing a widget's styles property. This allows programmatic control of text alignment.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/text_align.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.text_align = "justify"
```

----------------------------------------

TITLE: Outline Properties in Python
DESCRIPTION: Example Python code showing how to set outline properties programmatically
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/outline.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
# Set a heavy white outline
widget.outline = ("heavy", "white")

# Set a red outline on the left
widget.outline_left = ("outer", "red")
```

----------------------------------------

TITLE: Dark Mode CSS Styling in Textual v0.37.0
DESCRIPTION: Example of how to target dark mode styles in Textual v0.37.0 using the App.-dark-mode selector pattern.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-38-0.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
App.-dark-mode MyWidget Label {
    ...
}
```

----------------------------------------

TITLE: Visualizing Widget Alignment with Background and Border in Python
DESCRIPTION: This example adds a background color and border to a Static widget to better visualize its alignment. It sets the widget's width to 'auto' to demonstrate horizontal centering.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/center-things.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static

class CenterApp(App):
    def compose(self) -> ComposeResult:
        yield Static("Hello World!")

    CSS = """
    Screen {
        align: center middle;
    }

    Static {
        width: auto;
        background: blue;
        border: solid white;
    }
    """

if __name__ == "__main__":
    app = CenterApp()
    app.run()
```

----------------------------------------

TITLE: Using Percentage Units for Widget Dimensions in Textual
DESCRIPTION: This snippet demonstrates how to use percentage units to set widget dimensions relative to its parent. It creates a Static widget with 50% width and 80% height of its container.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static

LOREM_IPSUM = """Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."""

class DimensionsApp(App):
    def compose(self) -> ComposeResult:
        yield Static(LOREM_IPSUM, id="lorem")

    def on_mount(self) -> None:
        lorem = self.query_one("#lorem")
        lorem.styles.width = "50%"
        lorem.styles.height = "80%"

if __name__ == "__main__":
    app = DimensionsApp()
    app.run()
```

----------------------------------------

TITLE: Source Code for Tabs Widget Example (Python)
DESCRIPTION: A placeholder indicating the inclusion of the full Python source code for the example application `docs/examples/widgets/tabs.py`. This application demonstrates the practical use of the `Tabs` widget, including adding tabs dynamically (press 'a') and clearing all tabs (press 'c').
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/tabs.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
    ```python
    --8<-- "docs/examples/widgets/tabs.py"
    ```
```

----------------------------------------

TITLE: Advanced Padding with Tuple Values
DESCRIPTION: Shows how to set different padding values for vertical and horizontal edges using a tuple of two integers.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_9

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/styles/padding02.py"
```

----------------------------------------

TITLE: Setting Layers in Python
DESCRIPTION: A Python example demonstrating how to set layers programmatically using the style property of a widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layers.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
# Bottom layer is called 'below', layer above it is called 'above'
widget.style.layers = ("below", "above")
```

----------------------------------------

TITLE: Implementing Layered Layout in Textual with Python
DESCRIPTION: Python code for a Textual application demonstrating the use of layers. It defines an App containing widgets. The actual layer assignment and definition are typically handled in the associated CSS file ('layers.tcss'), but the Python code structures the widgets that will be layered. Dependencies: Textual library.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/layout/layers.py"
```

----------------------------------------

TITLE: Adding Clickable Text Links in Textual
DESCRIPTION: This snippet demonstrates how to add clickable text links to a Textual widget. When the link is clicked, it triggers the specified action (app.bell in this case).
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_6

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static

TEXT = """Click [@click=app.bell]Me[/] to make a bell sound.
Click [@click=update_text]here[/] to change this text.
"""

class HelloLinksApp(App):

    CSS_PATH = "hello05.tcss"

    def compose(self) -> ComposeResult:
        yield Static(TEXT)

    def action_bell(self) -> None:
        
```

----------------------------------------

TITLE: Configuring Input Validation in Textual's Input Widget
DESCRIPTION: Shows the declarative API for validating input in Textual's Input widget. This feature allows for easy implementation of input validation rules.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-27-0.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
Input(validate_on=["blur", "submit"], validators=[Regex(r"^\w+$")])
```

----------------------------------------

TITLE: Defining Calculator App Entry Point in Python
DESCRIPTION: This Python code defines a function `calculator` that initializes and runs the `CalculatorApp` from the `textual_calculator.calculator` module. This function serves as the entry point for the application, allowing it to be launched from the command line.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#_snippet_11

LANGUAGE: python
CODE:
```
from textual_calculator.calculator import CalculatorApp


def calculator():
    app = CalculatorApp()
    app.run()
```

----------------------------------------

TITLE: Example of Layers Usage in Python
DESCRIPTION: A Python script demonstrating the use of layers in a Textual application. It creates two boxes with different layers, showing how layer order affects rendering.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layers.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/layout/layers.py"
```

----------------------------------------

TITLE: Styling Box-sizing Example in CSS
DESCRIPTION: CSS styles for the box-sizing example, highlighting the lines where box-sizing is set for different widgets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/box_sizing.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/box_sizing.tcss"
```

----------------------------------------

TITLE: Initializing Basic TextArea Widget in Python
DESCRIPTION: Shows the simplest way to add a TextArea widget to a Textual application through the compose method.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/text-area-learnings.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
yield TextArea()
```

----------------------------------------

TITLE: Reactive Attribute with Dynamic Default Value
DESCRIPTION: This code demonstrates how to set a dynamic default value for a reactive attribute using a function. The `start_time` attribute will be automatically assigned the current time when the widget is created.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_1

LANGUAGE: Python
CODE:
```
from time import time
from textual.reactive import reactive
from textual.widget import Widget

class Timer(Widget):

    start_time = reactive(time)  # (1)!
```

----------------------------------------

TITLE: Setting Language for Syntax Highlighting in TextArea - Python
DESCRIPTION: Programmatically sets the syntax highlighting language for a TextArea instance to Markdown. This enables syntax highlighting if the 'syntax' dependencies are installed and the relevant tree-sitter language is supported. The 'language' attribute accepts supported language strings and applies highlighting on update. Can be used after setting text content or when changing document type.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
# Set the language to Markdown\ntext_area.language = \"markdown\"
```

----------------------------------------

TITLE: Creating SelectionList from Selection Objects in Python
DESCRIPTION: Provides the Python code reference for initializing a `SelectionList` widget using instances of the `Selection` class. This approach offers more explicit control over each selection item (prompt, value, initial state, id). The actual code is included from the specified file path (`docs/examples/widgets/selection_list_selections.py`). Note the type hint `SelectionList[int]` matching the integer values.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
~~~python
--8<-- "docs/examples/widgets/selection_list_selections.py"
~~~
```

----------------------------------------

TITLE: Using App.open_url method in Textual
DESCRIPTION: Using Textual's App.open_url method which handles opening URLs appropriately regardless of whether the app is running in a terminal or browser.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/textual-serve-files.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
App.open_url
```

----------------------------------------

TITLE: Collapsible Widget Implementation in Textual
DESCRIPTION: Demonstrates a collapsible content widget that can be toggled by clicking a title.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_2

LANGUAGE: textual
CODE:
```
docs/examples/widgets/collapsible.py
```

----------------------------------------

TITLE: Width Comparison Example - Python
DESCRIPTION: Python code showing different width measurement formats and their implementations.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/width.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/width_comparison.py"
```

----------------------------------------

TITLE: Setting Vertical Alignment in Python for Textual
DESCRIPTION: This Python snippet shows how to set the vertical alignment of a widget to the top using the styles.align_vertical attribute in Textual's Python API.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/vertical.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.align_vertical = "top"
```

----------------------------------------

TITLE: Switch Widget Implementation in Textual
DESCRIPTION: Demonstrates an on/off toggle control implementation.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_26

LANGUAGE: textual
CODE:
```
docs/examples/widgets/switch.py
```

----------------------------------------

TITLE: Setting Max-width in Python
DESCRIPTION: Shows how to set maximum width constraints programmatically using Python, demonstrating both fixed and viewport-relative units.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/max_width.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
# Set the maximum width to 10 rows
widget.styles.max_width = 10

# Set the maximum width to 25% of the viewport width
widget.styles.max_width = "25vw"
```

----------------------------------------

TITLE: Defining Layers and Assigning Widgets in Textual CSS
DESCRIPTION: Textual CSS (.tcss) file demonstrating how to define layout layers using the 'layers' property on a container and assign widgets to specific layers using the 'layer' property. This controls the stacking order, overriding the default yield order. Lines 3, 14, and 19 are highlighted, showing the layer definition and assignments.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_13

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/layout/layers.tcss"
```

----------------------------------------

TITLE: Radio Button Implementation Example
DESCRIPTION: Example showing radio buttons being used within a RadioSet component.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/radiobutton.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/radio_button.py"
```

----------------------------------------

TITLE: Demonstrating Text Alignment in Python
DESCRIPTION: Example Python script demonstrating different text alignments (left, center, right, justify) in Textual widgets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_align.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/text_align.py"
```

----------------------------------------

TITLE: Styling Select Widget Using CSS in Textual (CSS)
DESCRIPTION: This CSS snippet provides customization for the Select widget within a Textual application. Located in docs/examples/widgets/select.tcss, it allows altering the visual appearance of the Select control by targeting its classes and elements. It must be used alongside the associated Textual app for the styling to take effect. Inputs are CSS rules; outputs are the applied style changes to the widget UI at runtime.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/select.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/widgets/select.tcss"
```

----------------------------------------

TITLE: Installing Textual Developer Tools via Conda-Forge
DESCRIPTION: Installation command for Textual developer tools using micromamba.
SOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
micromamba install -c conda-forge textual-dev
```

----------------------------------------

TITLE: Setting Percentage Values in Python for Textual
DESCRIPTION: This example shows how to set percentage values in Python code for a Textual widget. It demonstrates applying both color with opacity percentage and offset with negative/decimal percentages.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/percentage.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
# Integer followed by %
widget.styles.color = "red 70%"

# The number can be negative/decimal, although that may not make sense
widget.styles.offset = ("-30%", "12.5%")
```

----------------------------------------

TITLE: Implementing Basic Tree Widget in Python
DESCRIPTION: Demonstrates usage of the new Tree control widget in Textual 0.6.0. Shows basic tree structure implementation.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-6-0.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/tree.py"
```

----------------------------------------

TITLE: CSS without Nesting
DESCRIPTION: This CSS defines styles for a container, buttons, and specific button types (affirmative and negative) without using nesting. It demonstrates a straightforward approach where each selector is fully specified.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_25

LANGUAGE: css
CODE:
```
#questions {
    layout: horizontal;
    height: 3;
    padding: 1;
    align: center middle;
}

#questions .button {
    width: 10;
    height: 1fr;
    border: tall $primary 60%;
    color: $text;
    dock: left;
    margin: 1;
    content-align: center middle;
}

#questions .button.affirmative {
    background: $success;
    color: $text-light;
}

#questions .button.negative {
    background: $error;
    color: $text-light;
}
```

----------------------------------------

TITLE: Running Textual App in Development Mode
DESCRIPTION: This command runs a Textual application in development mode, enabling live editing of CSS styles. Any changes made to the CSS file will be instantly updated in the terminal without restarting the application.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_3

LANGUAGE: bash
CODE:
```
textual run my_app.py --dev
```

----------------------------------------

TITLE: Grid Style Example CSS
DESCRIPTION: Example CSS code demonstrating the usage of grid layout styles in a Textual application
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/index.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/grid.tcss"
```

----------------------------------------

TITLE: Full Python Implementation Example
DESCRIPTION: Complete Python implementation demonstrating link hover styling in a Textual application, including both hyperlinks and action links.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_style_hover.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/link_style_hover.py"
```

----------------------------------------

TITLE: Demonstrating All Text Styles in Textual CSS
DESCRIPTION: This CSS snippet showcases all available text styles in Textual, including combinations of styles. It applies different text styles to multiple widgets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_style.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
#bold {
    text-style: bold;
}

#dim {
    text-style: dim;
}

#italic {
    text-style: italic;
}

#underline {
    text-style: underline;
}

#blink {
    text-style: blink;
}

#blink2 {
    text-style: blink2;
}

#reverse {
    text-style: reverse;
}

#strike {
    text-style: strike;
}
```

----------------------------------------

TITLE: Using Custom Port for Textual Console
DESCRIPTION: Demonstrates how to use a custom port for the Textual debug console and run command.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_14

LANGUAGE: bash
CODE:
```
textual console --port 7342
```

LANGUAGE: bash
CODE:
```
textual run --dev --port 7342 my_app.py
```

----------------------------------------

TITLE: Displaying Rich Spinner in Textual App (Python)
DESCRIPTION: This snippet demonstrates how to create a custom SpinnerWidget to display a Rich spinner in a Textual app. It uses Rich's Spinner class and updates the display at regular intervals.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/spinners-and-pbs-in-textual.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
from rich.spinner import Spinner

from textual.app import App, ComposeResult
from textual.widgets import Static


class SpinnerWidget(Static):
    def __init__(self):
        super().__init__("")
        self._spinner = Spinner("moon")  # (1)!

    def on_mount(self) -> None:
        self.update_render = self.set_interval(1 / 60, self.update_spinner)

    def update_spinner(self) -> None:
        self.update(self._spinner)


class MyApp(App[None]):
    def compose(self) -> ComposeResult:
        yield SpinnerWidget()


MyApp().run()
```

----------------------------------------

TITLE: Defining Max-Height in Textual CSS
DESCRIPTION: Shows the syntax for defining max-height in Textual CSS, using a scalar value to set the maximum height of a widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/max_height.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
max-height: <scalar>;
```

----------------------------------------

TITLE: Setting Border Titles and Subtitles on Textual Widgets
DESCRIPTION: This snippet demonstrates how to set the border title and subtitle of a Textual widget. The title is set as a class variable, while the subtitle is set as an instance attribute.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_8

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static

class HelloBorderApp(App):

    CSS_PATH = "hello06.tcss"

    class Hello(Static):
        
```

----------------------------------------

TITLE: Creating ListView Control with Custom Styling
DESCRIPTION: Example showing how to implement a ListView control with custom items and styling. Includes both Python implementation and CSS styling.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-6-0.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/list_view.py"
```

LANGUAGE: sass
CODE:
```
--8<-- "docs/examples/widgets/list_view.css"
```

----------------------------------------

TITLE: RichLog Widget Implementation in Textual
DESCRIPTION: Shows implementation of a scrolling text panel with Rich formatting.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_21

LANGUAGE: textual
CODE:
```
docs/examples/widgets/rich_log.py
```

----------------------------------------

TITLE: Styling Buttons within a Dialog and Horizontal Widget
DESCRIPTION: This CSS rule makes the text of buttons bold if they are descendants of both a 'Horizontal' widget and a widget with the ID 'dialog'. It combines multiple selectors with the descendant combinator.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_17

LANGUAGE: css
CODE:
```
#dialog Horizontal Button {
  text-style: bold;
}
```

----------------------------------------

TITLE: Displaying TextArea with Custom Theme using Textual Directive
DESCRIPTION: Uses a Textual directive to render an example application defined in `docs/examples/widgets/text_area_custom_theme.py`. This visually demonstrates the effect of applying the 'my_cool_theme' to the `TextArea` widget within a specified layout.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_14

LANGUAGE: textual
CODE:
```
```{.textual path="docs/examples/widgets/text_area_custom_theme.py" columns="42" lines="8"}
```
```

----------------------------------------

TITLE: Changing Terminal Size in Snapshot Test for Textual App
DESCRIPTION: This example demonstrates how to capture a snapshot with a different terminal size by passing a tuple (width, height) as the terminal_size parameter to snap_compare.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/testing.md#2025-04-22_snippet_5

LANGUAGE: python
CODE:
```
def test_calculator(snap_compare):
    assert snap_compare("path/to/calculator.py", terminal_size=(50, 100))
```

----------------------------------------

TITLE: Digital Clock Implementation
DESCRIPTION: Example showing how to create a digital clock display using the Digits widget to show current time
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/digits.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/clock.py"
```

----------------------------------------

TITLE: RadioButton Widget Implementation in Textual
DESCRIPTION: Shows implementation of a basic radio button control.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_19

LANGUAGE: textual
CODE:
```
docs/examples/widgets/radio_button.py
```

----------------------------------------

TITLE: Using Auto Color for Contrast in Python
DESCRIPTION: Illustrates the use of 'auto' color in a Textual application to automatically choose between light and dark text for better readability.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/color.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/color_auto.py"
```

----------------------------------------

TITLE: Width CSS Examples
DESCRIPTION: Examples of setting explicit cell width, percentage width, and automatic width in CSS.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/width.md#2025-04-22_snippet_5

LANGUAGE: css
CODE:
```
/* Explicit cell width */
width: 10;

/* Percentage width */
width: 50%;

/* Automatic width */
width: auto;
```

----------------------------------------

TITLE: Checkbox Widget Implementation in Textual
DESCRIPTION: Shows how to implement a classic checkbox control in the terminal interface.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_1

LANGUAGE: textual
CODE:
```
docs/examples/widgets/checkbox.py
```

----------------------------------------

TITLE: Border Style CSS Examples
DESCRIPTION: Common CSS border styling patterns including heavy borders, single-side borders, and rounded borders with opacity.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border.md#2025-04-22_snippet_5

LANGUAGE: css
CODE:
```
/* Set a heavy white border */
border: heavy white;

/* Set a red border on the left */
border-left: outer red;

/* Set a rounded orange border, 50% opacity. */
border: round orange 50%;
```

----------------------------------------

TITLE: Defining and Registering a Custom Theme in Python
DESCRIPTION: This snippet demonstrates how to create a custom theme called 'arctic' and register it within a Textual app. It defines base colors and additional variables for the theme.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/design.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
from textual.theme import Theme

arctic_theme = Theme(
    name="arctic",
    primary="#88C0D0",
    secondary="#81A1C1",
    accent="#B48EAD",
    foreground="#D8DEE9",
    background="#2E3440",
    success="#A3BE8C",
    warning="#EBCB8B",
    error="#BF616A",
    surface="#3B4252",
    panel="#434C5E",
    dark=True,
    variables={
        "block-cursor-text-style": "none",
        "footer-key-foreground": "#88C0D0",
        "input-selection-background": "#81a1c1 35%",
    },
)

from textual.app import App

class MyApp(App):
    def on_mount(self) -> None:
        # Register the theme
        self.register_theme(arctic_theme)  # (1)!

        # Set the app's theme
        self.theme = "arctic"  # (2)!
```

----------------------------------------

TITLE: Content Alignment CSS Examples
DESCRIPTION: Example CSS rules showing various content alignment configurations.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/content_align.md#2025-04-22_snippet_4

LANGUAGE: css
CODE:
```
/* Align content in the very center of a widget */
content-align: center middle;
/* Align content at the top right of a widget */
content-align: right top;

/* Change the horizontal alignment of the content of a widget */
content-align-horizontal: right;
/* Change the vertical alignment of the content of a widget */
content-align-vertical: middle;
```

----------------------------------------

TITLE: Markdown Widget Implementation in Textual
DESCRIPTION: Shows basic markdown document display functionality.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_13

LANGUAGE: textual
CODE:
```
docs/examples/widgets/markdown.py
```

----------------------------------------

TITLE: Importing and Using Color and Gradient Classes in Python
DESCRIPTION: Example demonstrating how to import and use the Color and Gradient classes from the textual.color module. It shows creating colors, gradients, and performing color operations.
SOURCE: https://github.com/textualize/textual/blob/main/docs/api/color.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
from textual.color import Color, Gradient

# Create a color
red = Color(255, 0, 0)
blue = Color.parse("blue")
transparent_green = Color(0, 255, 0, 0.5)

# Create a gradient
gradient = Gradient(Color(0, 0, 0), Color(255, 255, 255))

# Get a color from the gradient
mid_gray = gradient.get(0.5)
```

----------------------------------------

TITLE: SelectionList Widget Implementation in Textual
DESCRIPTION: Demonstrates multiple-selection functionality from a list of options.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_24

LANGUAGE: textual
CODE:
```
docs/examples/widgets/selection_list_selections.py
```

----------------------------------------

TITLE: RadioSet Widget Implementation in Textual
DESCRIPTION: Demonstrates a collection of radio buttons with enforced uniqueness.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_20

LANGUAGE: textual
CODE:
```
docs/examples/widgets/radio_set.py
```

----------------------------------------

TITLE: Demonstrating Border and Outline Differences in Python using Textual
DESCRIPTION: This Python script creates a Textual app with three labels to showcase the differences between border and outline styles. It sets up the labels with different styles and arranges them side by side for comparison.
SOURCE: https://github.com/textualize/textual/blob/main/docs/snippets/border_vs_outline_example.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/outline_vs_border.py"
```

----------------------------------------

TITLE: Adding Custom System Commands in Textual App
DESCRIPTION: Demonstrates how to add a custom system command to ring the terminal bell in a Textual app by implementing the get_system_commands method.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/command_palette.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Header, Footer
from textual.screen import Screen
from textual.app import SystemCommand

class CommandPaletteApp(App):
    def compose(self) -> ComposeResult:
        yield Header()
        yield Footer()

    def action_ring_bell(self) -> None:
        self.bell()

    def get_system_commands(self, screen: Screen):
        yield from super().get_system_commands(screen)
        yield SystemCommand(
            title="Ring bell",
            help="Ring the terminal bell",
            callback=self.action_ring_bell
        )

if __name__ == "__main__":
    app = CommandPaletteApp()
    app.run()
```

----------------------------------------

TITLE: CSS Min-height Implementation Examples
DESCRIPTION: Examples showing how to set minimum height using rows and viewport height units.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/min_height.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
/* Set the minimum height to 10 rows */
min-height: 10;

/* Set the minimum height to 25% of the viewport height */
min-height: 25vh;
```

----------------------------------------

TITLE: Using TabbedContent with Markdown Documents in Python
DESCRIPTION: Example showing how to compose a TabbedContent widget with three tabs (Leto, Jessica, and Paul) to navigate between different Markdown documents.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-16-0.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
def compose(self) -> ComposeResult:
    with TabbedContent("Leto", "Jessica", "Paul"):
        yield Markdown(LETO)
        yield Markdown(JESSICA)
        yield Markdown(PAUL)
```

----------------------------------------

TITLE: Running a Textual App with Different Arguments
DESCRIPTION: Example showing different ways to run a Textual app with various argument patterns, including default arguments, keyword arguments, and positional arguments.
SOURCE: https://github.com/textualize/textual/blob/main/docs/FAQ.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
# Running with default arguments.
Greetings().run()

# Running with a keyword argument.
Greetings(to_greet="davep").run()

# Running with both positional arguments.
Greetings("Well hello", "there").run()
```

----------------------------------------

TITLE: Action Links Implementation
DESCRIPTION: Example of using actions in markup links to trigger color changes.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/actions.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/actions/actions03.py"
```

----------------------------------------

TITLE: Launching Textual Debug Console
DESCRIPTION: Shows how to launch the Textual debug console for logging and debugging.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_11

LANGUAGE: bash
CODE:
```
textual console
```

----------------------------------------

TITLE: Button with Multiple CSS Classes in Textual
DESCRIPTION: This code shows how to create a Textual Button widget and assign multiple CSS classes ('error' and 'disabled') to it.  The classes are separated by spaces within the `classes` parameter. This enables styling the button based on the combination of classes.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_10

LANGUAGE: python
CODE:
```
yield Button(classes="error disabled")
```

----------------------------------------

TITLE: Implementing a Select Widget in Textual
DESCRIPTION: Python code example showing how to implement a Select widget in a Textual application. The snippet is referenced from the documentation but not directly included in the content.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-24-0.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/select_widget.py"
```

----------------------------------------

TITLE: Composing Collapsible Content via Context Manager (Python)
DESCRIPTION: Illustrates the preferred method of adding child widgets to a `Collapsible` using a `with` statement within a Textual `compose` method. This approach is generally clearer for multiple or complex children. This example yields a `Label` widget inside the `Collapsible` context.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
```python
def compose(self) -> ComposeResult:
    with Collapsible():
        yield Label("Hello, world.")
```
```

----------------------------------------

TITLE: Basic Border Syntax in CSS
DESCRIPTION: Demonstrates the core syntax for border styling, including border property definitions for all sides of a widget with color and percentage options.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
border: [<border>] [<color>] [<percentage>];

border-top: [<border>] [<color>] [<percentage>];
border-right: [<border>] [<color>] [<percentage>];
border-bottom: [<border>] [<color>] [<percentage>];
border-left: [<border>] [<color>] [<percentage>];
```

----------------------------------------

TITLE: CSS Link Color Hover Styling
DESCRIPTION: CSS rules for customizing link hover colors in Textual UI. Demonstrates setting hover colors with different opacities.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_color_hover.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/link_color_hover.tcss"
```

----------------------------------------

TITLE: MaskedInput Widget Implementation in Textual
DESCRIPTION: Demonstrates input control with template mask support.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_14

LANGUAGE: textual
CODE:
```
docs/examples/widgets/masked_input.py
```

----------------------------------------

TITLE: Footer Widget Implementation in Textual
DESCRIPTION: Demonstrates a footer widget for displaying and interacting with key bindings.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_6

LANGUAGE: textual
CODE:
```
docs/examples/widgets/footer.py
```

----------------------------------------

TITLE: Setting Max-Height in CSS for Textual
DESCRIPTION: Examples of setting max-height in CSS for Textual, including fixed row height and percentage of viewport height.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/max_height.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
/* Set the maximum height to 10 rows */
max-height: 10;

/* Set the maximum height to 25% of the viewport height */
max-height: 25vh;
```

----------------------------------------

TITLE: Implementing an Option List with Rich Tables in Textual
DESCRIPTION: This Python code example illustrates how to create an OptionList in Textual that displays Rich tables as items. It showcases the flexibility of the OptionList widget in rendering complex Rich renderables.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-17-0.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
```{.textual path="docs/examples/widgets/option_list_tables.py" columns="100" lines="32"}
```
```

----------------------------------------

TITLE: Row Span Python Implementation
DESCRIPTION: Python method for programmatically setting a widget's row span in a grid layout. Uses the styles property to set the number of rows a widget should span.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/row_span.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.row_span = 3
```

----------------------------------------

TITLE: Basic DirectoryTree Usage
DESCRIPTION: Example demonstrating how to create a simple tree navigation for the current working directory.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/directory_tree.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/directory_tree.py"
```

----------------------------------------

TITLE: Checkbox Widget CSS Styling
DESCRIPTION: CSS styling rules for the checkbox widget
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/checkbox.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/widgets/checkbox.tcss"
```

----------------------------------------

TITLE: Styling Header Widget with CSS
DESCRIPTION: This CSS rule set styles a Textual Header widget. It docks the header to the top of the screen, sets its height to 3, aligns content to the center, and applies a blue background with white text.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_0

LANGUAGE: css
CODE:
```
Header {
  dock: top;
  height: 3;
  content-align: center middle;
  background: blue;
  color: white;
}
```

----------------------------------------

TITLE: Calculator Styling with TCSS
DESCRIPTION: This snippet shows the TCSS (Textual CSS) used to style the calculator application. TCSS allows developers to customize the appearance of Textual applications.
SOURCE: https://github.com/textualize/textual/blob/main/docs/index.md#_snippet_2

LANGUAGE: CSS
CODE:
```
--8<-- "examples/calculator.tcss"
```

----------------------------------------

TITLE: Box Sizing Demonstration
DESCRIPTION: Compares border-box and content-box sizing models with practical examples of their effects on widget dimensions.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_14

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/styles/box_sizing01.py"
```

----------------------------------------

TITLE: Grid Size Both Dimensions Example
DESCRIPTION: Python implementation showing a grid with fixed columns and rows setup with style properties
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_size.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
Screen {
    grid-size: 2 5;
}
```

----------------------------------------

TITLE: Implementing Grid-rows in Python with Textual
DESCRIPTION: Demonstrates how to create a grid layout with specified row heights using Python in the Textual framework.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_rows.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/grid_rows.py"
```

----------------------------------------

TITLE: Styling Grid Gutter in Textual CSS
DESCRIPTION: Shows how to apply grid gutter styles in a Textual CSS file, highlighting the line that sets the gutter sizes.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_gutter.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/grid_gutter.tcss"
```

----------------------------------------

TITLE: Simple Input Validation Configuration - Python
DESCRIPTION: Shows how to configure an Input widget to validate only on submission.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/input.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
input = Input(validate_on=["submitted"])
```

----------------------------------------

TITLE: Styling SelectionList with Textual CSS (Tuple Example)
DESCRIPTION: References the Textual CSS file used to style the `SelectionList` widget in the accompanying tuple-based example. This file defines the visual appearance of the selection list and its elements when initialized using tuples. The actual CSS rules are included from the specified file path (`docs/examples/widgets/selection_list.tcss`).
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
~~~css
--8<-- "docs/examples/widgets/selection_list.tcss"
~~~
```

----------------------------------------

TITLE: Creating and Handling System Commands in Textual
DESCRIPTION: Demonstrates the process of creating a system command handler that registers with the App's runtime. The code shows how to implement the @system_command decorator to handle a command with a specific name and process arguments.
SOURCE: https://github.com/textualize/textual/blob/main/docs/api/system_commands_source.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
@system_command("command")
def command_handler(self, command: Callable, args=None) -> None:
    """Handler for the command.

    Args:
        command: The command.
        args: Optional arguments string.
    """
    if args:
        # Do something with args
        ...
    else:
        # Do something without args
        ...
```

----------------------------------------

TITLE: Setting Widget Dimensions in Textual Python Application
DESCRIPTION: This snippet demonstrates how to set specific width and height for a widget in a Textual application. It creates a Static widget with a fixed width of 20 columns and height of 10 rows.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static

LOREM_IPSUM = """Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."""

class DimensionsApp(App):
    def compose(self) -> ComposeResult:
        yield Static(LOREM_IPSUM, id="lorem")

    def on_mount(self) -> None:
        lorem = self.query_one("#lorem")
        lorem.styles.width = 20
        lorem.styles.height = 10

if __name__ == "__main__":
    app = DimensionsApp()
    app.run()
```

----------------------------------------

TITLE: Python Link Color Hover Example
DESCRIPTION: Example Python script demonstrating the implementation of link hover colors using Textual's action links. Shows multiple labels with different hover color configurations.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_color_hover.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/link_color_hover.py"
```

----------------------------------------

TITLE: Displaying a Sparkline Widget with Different Summary Functions in Textual (Python)
DESCRIPTION: Showcases how to configure the Sparkline widget to use various summary functions (e.g., max, mean, min) for determining bar heights. This requires the 'textual' library and potentially other Python standard libraries for calculation (e.g., statistics.mean). The code configures the widget to apply each summary function to each data chunk, changing the interpretation of the data per bar. Takes a sequence and displays three sparklines: one using the maximum, one the mean, and one the minimum of each bucket, with visual differences in the rendered bars.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/sparkline.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
```
--8<-- \"docs/examples/widgets/sparkline.py\"
```
```

----------------------------------------

TITLE: Adding Command Provider to Textual App in Python
DESCRIPTION: This snippet shows how to add a custom command provider to a Textual app. It defines a ColorApp class that includes the ColorCommands provider in its COMMANDS set.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0.37.0.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
class ColorApp(App):
    """Experiment with the command palette."""

    COMMANDS = App.COMMANDS | {ColorCommands}
```

----------------------------------------

TITLE: Setting Button Background to Green
DESCRIPTION: This CSS rule sets the background color of all Button widgets to green. It applies to all buttons in the application unless overridden by more specific rules.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_23

LANGUAGE: css
CODE:
```
Button {
  background: green;
}
```

----------------------------------------

TITLE: Textual Opacity Example CSS
DESCRIPTION: CSS file showing multiple opacity levels applied to different widgets, demonstrating the visual effect of various opacity values.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/opacity.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/opacity.tcss"
```

----------------------------------------

TITLE: Max-width CSS Examples
DESCRIPTION: Demonstrates different ways to set maximum width using CSS, including fixed units and viewport-relative units.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/max_width.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
/* Set the maximum width to 10 rows */
max-width: 10;

/* Set the maximum width to 25% of the viewport width */
max-width: 25vw;
```

----------------------------------------

TITLE: Creating OptionList with Rich Tables in Python
DESCRIPTION: Advanced example demonstrating how to use Rich tables as options in an OptionList
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/option_list.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/option_list_tables.py"
```

----------------------------------------

TITLE: Implementing Basic MarkdownViewer Example
DESCRIPTION: Example showing how to display Markdown content with a Table of Contents using the MarkdownViewer widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/markdown_viewer.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/markdown_viewer.py"
```

----------------------------------------

TITLE: Row Span Example CSS
DESCRIPTION: Example CSS file showing row span usage in a grid layout with multiple placeholders spanning different numbers of rows.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/row_span.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/row_span.tcss"
```

----------------------------------------

TITLE: Setting Height in Python for Textual
DESCRIPTION: Python code examples for setting widget height in Textual, demonstrating explicit cell height, percentage height, and automatic height.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/height.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
self.styles.height = 10  # Explicit cell height can be an int
self.styles.height = "50%"
self.styles.height = "auto"
```

----------------------------------------

TITLE: Grid Size Python Implementation
DESCRIPTION: Shows how to programmatically set grid dimensions using Python by separately specifying rows and columns through style properties
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_size.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.grid_size_rows = 3
widget.styles.grid_size_columns = 6
```

----------------------------------------

TITLE: Compute Method Example - CSS
DESCRIPTION: This CSS styles the color display within the Textual application, setting its width, height, and text alignment.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_18

LANGUAGE: CSS
CODE:
```
#color {
    width: 100%;
    height: 5;
    text-align: center;
}
```

----------------------------------------

TITLE: Static Title Configuration in Textual App
DESCRIPTION: Example of setting static title and subtitle using class variables TITLE and SUB_TITLE.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/app/question_title01.py"
```

----------------------------------------

TITLE: Setting Column-span in CSS for Textual
DESCRIPTION: Shows how to set the column-span property in CSS for Textual framework.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/column_span.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
column-span: 3;
```

----------------------------------------

TITLE: Setting Height in Textual CSS
DESCRIPTION: Examples of setting widget height using different methods in Textual CSS, including explicit cell height, percentage height, and automatic height.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/height.md#2025-04-22_snippet_5

LANGUAGE: css
CODE:
```
/* Explicit cell height */
height: 10;

/* Percentage height */
height: 50%;

/* Automatic height */
height: auto
```

----------------------------------------

TITLE: Dynamic Title Configuration in Textual App
DESCRIPTION: Demonstrates dynamic updating of title and subtitle in response to user input.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/app/question_title02.py"
```

----------------------------------------

TITLE: RadioSet Change Event Handling
DESCRIPTION: Example showing how to handle RadioSet change events and respond to user selection.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/radioset.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/radio_set_changed.py"
```

----------------------------------------

TITLE: Positioning a Label with Absolute Position in CSS
DESCRIPTION: CSS example showing how to set absolute positioning for a Label widget with an offset of 10 units from the left and 5 units from the top of its container.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/position.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
Label {
    position: absolute;
    offset: 10 5;
}
```

----------------------------------------

TITLE: Implementing Advanced Docking with Labels in Python using Textual
DESCRIPTION: Demonstrates advanced usage of the 'dock' style by creating full-width and full-height containers with docked labels on all edges of a larger container.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/dock.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/dock_all.py"
```

----------------------------------------

TITLE: Applying Custom Scrollbar Styles in Textual CSS
DESCRIPTION: This CSS file defines custom styles for scrollbars in a Textual application. It sets specific colors for the scrollbar background, thumb, and corner in the right panel, while leaving the left panel with default styles for comparison.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/index.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/scrollbars.tcss"
```

----------------------------------------

TITLE: Styling Link Colors in Textual CSS
DESCRIPTION: Demonstrates how to set link colors using Textual CSS. It shows examples of using different color formats and variables.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_color.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
Screen {
    background: $boost;
}

#label1 {
    link-color: red;
}

#label2 {
    link-color: green 50%;
}

#label3 {
    link-color: #ffff00;
}

#label4 {
    link-color: $accent;
}
```

----------------------------------------

TITLE: Rendering a Basic Sparkline Widget Using Textual in Python
DESCRIPTION: Demonstrates initializing and rendering a Sparkline widget to visually represent a sequence of numerical data using Textual (Python framework). The example shows how data is chunked based on widget width to display aggregated values as bars. Requires the 'textual' library and a CSS stylesheet to define widget dimensions (not included here). Expects a sequence of 12 numbers; the sparkline width is set to 3 via CSS, resulting in 3 bars, each representing the maximum of its chunk. Outputs a visual sparkline widget in a Textual TUI application.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/sparkline.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
```
--8<-- \"docs/examples/widgets/sparkline_basic.py\"
```
```

----------------------------------------

TITLE: Setting Border Subtitle Color in Python for Textual
DESCRIPTION: This Python snippet shows how to programmatically set the border subtitle color in Textual. It uses the styles.border_subtitle_color attribute of a widget to set the color to red.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_subtitle_color.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.border_subtitle_color = "red"
```

----------------------------------------

TITLE: Instantiating a Select Widget Using from_values Class Method (Python)
DESCRIPTION: This Python code sample illustrates how to construct a Select widget using the from_values class method, simplifying initialization by accepting a list of values instead of explicit label-value tuples. Found in docs/examples/widgets/select_from_values_widget.py, it highlights an alternative approach to widget instantiation in Textual. The primary input is a sequence of values, with outputs being the rendered Select control. Requires Textual library and access to the referenced file structure for direct use.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/select.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/select_from_values_widget.py"
```

----------------------------------------

TITLE: Applying border styles with CSS in Textual
DESCRIPTION: CSS example showing how to apply border styles to widgets in Textual applications, including full borders and individual border edges.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/border.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
#container {
    border: heavy red;
}

#heading {
    border-bottom: solid blue;
}
```

----------------------------------------

TITLE: Textual Opacity Example Python
DESCRIPTION: Python implementation file showing how to create widgets with different opacity levels. The example demonstrates opacity effects in a real application context.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/opacity.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/opacity.py"
```

----------------------------------------

TITLE: Styling the Switch Widget for Textual Apps (CSS)
DESCRIPTION: This snippet refers to a CSS file providing style definitions for the Switch widget in Textual apps. It controls the visual presentation, such as color, border, and spacing. It must be used alongside the corresponding Python logic, with proper file referencing. Key rules affect layout and can remove surrounding space (border/padding). Inputs must match component class selectors, and effects are visible in theme and spatial adjustments. The file cannot be executed directly; it is loaded by the Textual app for theming.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/switch.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
--8<-- \"docs/examples/widgets/switch.tcss\"
```

----------------------------------------

TITLE: Styling Text Links in Textual
DESCRIPTION: This CSS snippet styles the appearance of text links within a Textual widget, specifically targeting the 'underline' pseudo-class to remove the default underline.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_7

LANGUAGE: css
CODE:
```
Static a:link {
  text-style: none;
}

Static a:visited {
  text-style: none;
}

Static a:hover {
  text-style: none;
}

Static a:active {
  text-style: none;
}

Static a:focus {
  outline: none;
  text-style: none;
}

Static a:link:underline {
  text-style: underline;
}

Static a:visited:underline {
  text-style: underline;
}

Static a:hover:underline {
  text-style: underline;
}

Static a:active:underline {
  text-style: underline;
}

Static a:focus:underline {
  text-style: underline;
}
```

----------------------------------------

TITLE: Basic Weather App Implementation - Python
DESCRIPTION: Initial weather app implementation that demonstrates potential concurrency issues when making network requests directly in message handlers.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/workers.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/workers/weather01.py"
```

----------------------------------------

TITLE: Styling Placeholder Widget - CSS Implementation
DESCRIPTION: CSS styling rules for the Placeholder widget, defining its visual appearance and layout properties.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/placeholder.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/widgets/placeholder.tcss"
```

----------------------------------------

TITLE: CSS Rules Example
DESCRIPTION: This example demonstrates CSS rules within a rule set. Each rule consists of a name and a value, separated by a colon and ending with a semicolon. These rules define the style properties of the selected widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_2

LANGUAGE: css
CODE:
```
Header {
  dock: top;
  height: 3;
  content-align: center middle;
  background: blue;
  color: white;
}
```

----------------------------------------

TITLE: Installing the Latest Version of Textual
DESCRIPTION: Command to install the latest version of Textual-dev using pip with the upgrade flag to resolve import errors related to ComposeResult.
SOURCE: https://github.com/textualize/textual/blob/main/docs/FAQ.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pip install textual-dev -U
```

----------------------------------------

TITLE: Comprehensive Margin Styling in CSS
DESCRIPTION: CSS styles for the comprehensive margin settings example, showcasing various margin configurations.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/margin.md#2025-04-22_snippet_5

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/margin_all.tcss"
```

----------------------------------------

TITLE: Python Widget Visibility Shortcut
DESCRIPTION: Demonstrates the shorthand visible property for controlling widget visibility in Python.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/visibility.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
# Make a widget invisible
widget.visible = False

# Make the widget visible again
widget.visible = True
```

----------------------------------------

TITLE: Styling Scrollbars with TCSS
DESCRIPTION: A TCSS (Textual CSS) file that demonstrates how to style scrollbars, including the scrollbar-color-active property. This style sheet can be used in conjunction with the Python script to customize scrollbar appearance.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color_active.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/scrollbars2.tcss"
```

----------------------------------------

TITLE: Comprehensive Link Style Example CSS
DESCRIPTION: Complete CSS example showing link style hover implementations for different classes, including specific style rules for action links.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_style_hover.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/link_style_hover.tcss"
```

----------------------------------------

TITLE: Querying Available Themes in TextArea - Python
DESCRIPTION: Shows how to inspect the set of names of built-in themes available for the TextArea widget. Accesses the 'available_themes' property, which returns a set of supported theme strings. Useful for dynamic theme selection and validation before applying a theme.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
>>> text_area = TextArea()\n>>> print(text_area.available_themes)\n{'css', 'dracula', 'github_light', 'monokai', 'vscode_dark'}
```

----------------------------------------

TITLE: Radio Button Styling
DESCRIPTION: CSS styling rules for the radio button widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/radiobutton.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/widgets/radio_button.tcss"
```

----------------------------------------

TITLE: Setting Text Style in CSS
DESCRIPTION: This CSS snippet shows how to set the text-style property to italic. It's a simple example of applying a text style in Textual CSS.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_style.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
text-style: italic;
```

----------------------------------------

TITLE: Using &lt;number&gt; type in Textual Python code
DESCRIPTION: Shows how to set styles that expect a &lt;number&gt; type in Python code for Textual, using both int and float values.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/number.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.grid_size = (3, 6)  # Integers are numbers
widget.styles.opacity = 0.5       # Numbers can have a decimal part
```

----------------------------------------

TITLE: Using Outline Style in Textual
DESCRIPTION: Shows how to add an outline to a widget, which differs from border by potentially overlapping content.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_13

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/styles/outline01.py"
```

----------------------------------------

TITLE: Defining Align Style in CSS
DESCRIPTION: Examples of using the 'align' style in CSS to position child widgets within a container. It demonstrates various alignment options and axis-specific alignments.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/align.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
/* Align child widgets to the center. */
align: center middle;
/* Align child widget to the top right */
align: right top;

/* Change the horizontal alignment of the children of a widget */
align-horizontal: right;
/* Change the vertical alignment of the children of a widget */
align-vertical: middle;
```

----------------------------------------

TITLE: Running Textual Demo Application
DESCRIPTION: Command to launch the Textual demo application after installation to verify proper setup and explore capabilities.
SOURCE: https://github.com/textualize/textual/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
python -m textual
```

----------------------------------------

TITLE: Styling ListView - CSS
DESCRIPTION: CSS styling rules for customizing the appearance of the ListView widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/list_view.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/widgets/list_view.tcss"
```

----------------------------------------

TITLE: Setting Scrollbar Color Active in Python
DESCRIPTION: Sets the color of the scrollbar thumb to yellow when it's being dragged using Python. This code can be used to programmatically style the active state of scrollbars in Textual widgets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color_active.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.scrollbar_color_active = "yellow"
```

----------------------------------------

TITLE: Publishing Project to PyPI with Hatch
DESCRIPTION: This bash command publishes the project to PyPI using Hatch. It requires an API token for authentication. Replace `<YOUR API TOKEN>` with the actual API token generated from PyPI.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#_snippet_17

LANGUAGE: bash
CODE:
```
hatch publish -u __token__ -a <YOUR API TOKEN>
```

----------------------------------------

TITLE: Configuring Border Titles and Alignment
DESCRIPTION: Demonstrates setting border titles and their alignment using border-title-align and border-subtitle-align styles.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/styles.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/styles/border_title.py"
```

----------------------------------------

TITLE: Running Textual Example Script
DESCRIPTION: Demonstrates how to run an example script using the Textual CLI command. The command executes a text_style.py example file.
SOURCE: https://github.com/textualize/textual/blob/main/docs/examples/styles/README.md#2025-04-22_snippet_0

LANGUAGE: shell
CODE:
```
textual run text_style.py
```

----------------------------------------

TITLE: Installing Textual via Conda-Forge
DESCRIPTION: Installation command using micromamba package manager from conda-forge.
SOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
micromamba install -c conda-forge textual
```

----------------------------------------

TITLE: Basic Width Example - Python Implementation
DESCRIPTION: Python code demonstrating basic widget width implementation.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/width.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/width.py"
```

----------------------------------------

TITLE: Defining Layers in Textual CSS
DESCRIPTION: Syntax for defining layers in Textual CSS. It accepts one or more named layers that determine the order in which widgets are painted on the screen.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layers.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
layers: <name>+;
```

----------------------------------------

TITLE: Creating Basic Content
DESCRIPTION: Shows how to create Content instances without markup processing
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_12

LANGUAGE: python
CODE:
```
Content("hello, World!")
```

----------------------------------------

TITLE: Implementing Box-sizing Example in Python
DESCRIPTION: A Python script demonstrating the use of box-sizing in a Textual application. It creates widgets with different box-sizing properties to show their effects.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/box_sizing.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/box_sizing.py"
```

----------------------------------------

TITLE: Setting Background Colors in Python
DESCRIPTION: Examples of setting background colors in Python using string syntax and Color objects for more precise control.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/background.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
# Set blue background
widget.styles.background = "blue"
# Set through HSL model
widget.styles.background = "hsl(351,32%,89%)"

from textual.color import Color
# Set with a color object by parsing a string
widget.styles.background = Color.parse("pink")
widget.styles.background = Color.parse("#FF00FF")
# Set with a color object instantiated directly
widget.styles.background = Color(120, 60, 100)
```

----------------------------------------

TITLE: Configuring Grid Row Heights in Python
DESCRIPTION: Shows how to set grid row heights programmatically using Python in the Textual framework.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_rows.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
grid.styles.grid_rows = "50%"
grid.styles.grid_rows = "1fr 2fr"
```

----------------------------------------

TITLE: Displaying Header with Custom Title/Subtitle (Output)
DESCRIPTION: Shows the visual output render of a Textual application where the Header widget displays a custom title and subtitle. This demonstrates how setting App attributes affects the header content.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/header.md#2025-04-22_snippet_2

LANGUAGE: textual
CODE:
```
```{.textual path="docs/examples/widgets/header_app_title.py"}
```
```

----------------------------------------

TITLE: CSS Link Styling Syntax
DESCRIPTION: CSS syntax definition for Textual link styling properties including background, color, and text style for both normal and hover states.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/index.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
link-background: <color> [<percentage>];
link-color: <color> [<percentage>];
link-style: <text-style>;
link-background-hover: <color> [<percentage>];
link-color-hover: <color> [<percentage>];
link-style-hover: <text-style>;
```

----------------------------------------

TITLE: Custom Styled Progress Bar - Python
DESCRIPTION: Implementation of a progress bar with custom styling applied through Python code.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/progress_bar.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/progress_bar_styled.py"
```

----------------------------------------

TITLE: Styling Text Opacity with TCSS
DESCRIPTION: CSS styles demonstrating different text opacity values for Textual widgets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_opacity.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/text_opacity.tcss"
```

----------------------------------------

TITLE: Textual-Plotext Integration Example
DESCRIPTION: Shows how to create a scatter plot using the textual-plotext library within a Textual application. Demonstrates the integration of Plotext functionality using the PlotextPlot widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/textual-plotext.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult

from textual_plotext import PlotextPlot

class ScatterApp(App[None]):

    def compose(self) -> ComposeResult:
        yield PlotextPlot()

    def on_mount(self) -> None:
        plt = self.query_one(PlotextPlot).plt
        y = plt.sin() # sinusoidal test signal
        plt.scatter(y)
        plt.title("Scatter Plot") # to apply a title

if __name__ == "__main__":
    ScatterApp().run()
```

----------------------------------------

TITLE: Customizing Sparkline Widget Colors in Textual Using Python
DESCRIPTION: Demonstrates how to use Python and Textual to render a Sparkline widget with customized colors by assigning component classes. The code interacts with the widget's API to apply classes that are targeted by accompanying CSS rules. Requires the 'textual' library, matching CSS file for color definitions, and visualization of the results in a Textual app interface. Allows users to see different color schemes applied to sparklines for enhanced visual distinction of data.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/sparkline.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
```
--8<-- \"docs/examples/widgets/sparkline_colors.py\"
```
```

----------------------------------------

TITLE: Batch Update Implementation for Markdown Widget
DESCRIPTION: Example of using batch_update context manager to prevent screen flicker when updating markdown content.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-12-0.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
with self.app.batch_update():
    await self.query("MarkdownBlock").remove()
    await self.mount_all(output)
```

----------------------------------------

TITLE: Type Hinting SelectionList with Integers in Python
DESCRIPTION: Demonstrates using Python's `typing.Generic` to specify the type of values stored within a `SelectionList`. This example initializes a list with tuples containing strings and integers, then type hints the `SelectionList` instance to expect integer values. This is optional but recommended for type safety.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/selection_list.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
```python
selections = [("First", 1), ("Second", 2)]
my_selection_list: SelectionList[int] =  SelectionList(*selections)
```
```

----------------------------------------

TITLE: Implementing Hatch Effects in Python with Textual
DESCRIPTION: Demonstrates how to create a Textual app showcasing various hatch effects. The code creates a grid of containers with different hatch styles applied.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/hatch.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/hatch.py"
```

----------------------------------------

TITLE: Basic File Reading in Python
DESCRIPTION: A simple example of how most applications read files into memory, which can be problematic for very large files.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/toolong-retrospective.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
with open("access.log", "rb") as log_file:
    log_data = log_file.read()
```

----------------------------------------

TITLE: Updating Layout on Reactive Attribute Change in Textual (CSS)
DESCRIPTION: This CSS styles the Textual application, including setting the width of the greeting to `auto` so that it expands to fit the content when the input changes.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_7

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/reactivity/refresh02.tcss"
```

----------------------------------------

TITLE: Setting Scrollbar Sizes with CSS
DESCRIPTION: Examples of setting scrollbar sizes using CSS syntax. Shows how to set both scrollbars together or individually using the scrollbar-size property.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_size.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
/* Set horizontal scrollbar to 10, and vertical scrollbar to 4 */
scrollbar-size: 10 4;

/* Set horizontal scrollbar to 10 */
scrollbar-size-horizontal: 10;

/* Set vertical scrollbar to 4 */
scrollbar-size-vertical: 4;
```

----------------------------------------

TITLE: Basic Outline CSS Styling
DESCRIPTION: CSS styling for basic outline example showing highlighted outline property
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/outline.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/outline.tcss"
```

----------------------------------------

TITLE: Creating Non-Refreshing Reactive Attributes
DESCRIPTION: This code illustrates how to create non-refreshing reactive attributes using `var`. Changing the value of `self.count` will not cause a refresh or layout.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_5

LANGUAGE: Python
CODE:
```
from textual.reactive import var
from textual.widget import Widget

class MyWidget(Widget):
    count = var(0)  # (1)!
```

----------------------------------------

TITLE: Setting Text Opacity in CSS
DESCRIPTION: Example of setting text opacity to 50% using CSS syntax.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_opacity.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
/* Set the text to be "half-faded" against the background of the widget */
text-opacity: 50%;
```

----------------------------------------

TITLE: Setting Border Subtitle Background in Python
DESCRIPTION: Sets the background color of a widget's border subtitle using Python code by accessing the widget's styles property.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_subtitle_background.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.border_subtitle_background = "blue"
```

----------------------------------------

TITLE: Implementing Grid Gutter in Python with Textual
DESCRIPTION: Demonstrates how to use the grid_gutter style in a Textual Python application, creating a grid layout with custom gutters.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_gutter.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/grid_gutter.py"
```

----------------------------------------

TITLE: Launching Calculator App from Command Line
DESCRIPTION: This bash command launches the calculator application from the command line. It assumes that the entry point has been correctly configured in the `pyproject.toml` file and the project has been installed.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#_snippet_15

LANGUAGE: bash
CODE:
```
calculator
```

----------------------------------------

TITLE: Running Specific Textual App Instances or Classes
DESCRIPTION: Shows how to run a specific Textual app instance or class from a Python import.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_4

LANGUAGE: bash
CODE:
```
textual run music.play:MusicPlayerApp
```

----------------------------------------

TITLE: Implementing Text Opacity Example in Python
DESCRIPTION: A Python example demonstrating text opacity styling in a Textual application.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_opacity.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/text_opacity.py"
```

----------------------------------------

TITLE: CSS Tint Examples
DESCRIPTION: Examples of applying red and green tints to widgets using CSS with different opacity levels.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/tint.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
/* A red tint (could indicate an error) */
tint: red 20%;

/* A green tint */
tint: rgba(0, 200, 0, 0.3);
```

----------------------------------------

TITLE: Grid Gutter Configuration in Textual
DESCRIPTION: Shows how to add spacing between grid cells using the grid-gutter property. Sets background colors to demonstrate the gutter effect.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_9

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/layout/grid_layout7_gutter.py"
```

LANGUAGE: css
CODE:
```
hl_lines="4"
--8<-- "docs/examples/guide/layout/grid_layout7_gutter.tcss"
```

----------------------------------------

TITLE: Installing Textual Calculator with pip
DESCRIPTION: This command demonstrates how to install the packaged Textual calculator application using pip, the Python package installer.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install textual-calculator
```

----------------------------------------

TITLE: CSS for Custom Widget in Textual
DESCRIPTION: This CSS styles the `Hello` widget, setting its background to green.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_2

LANGUAGE: CSS
CODE:
```
Hello {
    background: green;
}
```

----------------------------------------

TITLE: Setting Return Code in Textual App
DESCRIPTION: Example showing how to set and handle return codes when exiting a Textual application. Demonstrates proper error handling with custom return codes.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
if critical_error:
    self.exit(return_code=4, message="Critical error occurred")
```

----------------------------------------

TITLE: Defining Layers in Textual CSS
DESCRIPTION: CSS example showing how to define layers and assign widgets to specific layers. It highlights the lines where layers are defined and assigned.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layer.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/layout/layers.tcss"
```

----------------------------------------

TITLE: Header Widget Implementation in Textual
DESCRIPTION: Shows implementation of a header widget for displaying app title and subtitle.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_7

LANGUAGE: textual
CODE:
```
docs/examples/widgets/header.py
```

----------------------------------------

TITLE: Setting Column-span in Python for Textual
DESCRIPTION: Demonstrates how to set the column-span property programmatically in Python for a Textual widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/column_span.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
widget.styles.column_span = 3
```

----------------------------------------

TITLE: Setting a Custom Title for Collapsible (Python)
DESCRIPTION: Shows how to customize the default title ("Toggle") of a `Collapsible` widget by setting the `title` parameter in its constructor. This allows providing a more descriptive label for the collapsible section.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
```python
def compose(self) -> ComposeResult:
    with Collapsible(title="An interesting story."):
        yield Label("Interesting but verbose story.")
```
```

----------------------------------------

TITLE: Python Link Color Hover Implementation
DESCRIPTION: Python code showing different ways to set link hover colors, including using string values and Color objects.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_color_hover.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
widget.styles.link_color_hover = "red 70%"
widget.styles.link_color_hover = "black"

# You can also use a `Color` object directly:
widget.styles.link_color_hover = Color(100, 30, 173)
```

----------------------------------------

TITLE: Placeholder Widget Implementation in Textual
DESCRIPTION: Demonstrates placeholder content for UI design phases.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_16

LANGUAGE: textual
CODE:
```
docs/examples/widgets/placeholder.py
```

----------------------------------------

TITLE: Setting Border Title Color with CSS in Textual
DESCRIPTION: This CSS snippet demonstrates how to set the color of the border title to red using the border-title-color property in Textual.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border_title_color.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
border-title-color: red;
```

----------------------------------------

TITLE: Aligning Textual ToastRack Container using CSS
DESCRIPTION: This SCSS snippet shows how to change the position where Toasts appear by targeting the `ToastRack` CSS type selector. The `align` property is set to `right top`, which positions the container (and thus the toasts) in the top-right corner of the screen.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/toast.md#2025-04-22_snippet_1

LANGUAGE: scss
CODE:
```
ToastRack {
        align: right top;
}
```

----------------------------------------

TITLE: Accessing Textual CLI Help
DESCRIPTION: Command to display available Textual CLI commands and options.
SOURCE: https://github.com/textualize/textual/blob/main/docs/getting_started.md#2025-04-22_snippet_5

LANGUAGE: bash
CODE:
```
textual --help
```

----------------------------------------

TITLE: Setting min-width in Python for Textual widgets
DESCRIPTION: Demonstrates how to set the min-width style for Textual widgets using Python. Includes examples of setting a fixed minimum width and a percentage-based minimum width.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/min_width.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
# Set the minimum width to 10 rows
widget.styles.min_width = 10

# Set the minimum width to 25% of the viewport width
widget.styles.min_width = "25vw"
```

----------------------------------------

TITLE: Defining Offset Style in CSS
DESCRIPTION: Demonstrates how to use the 'offset' property in CSS to move widgets horizontally and vertically. It also shows how to use 'offset-x' and 'offset-y' for single-axis offsets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/offset.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
/* Move the widget 8 cells in the x direction and 2 in the y direction */
offset: 8 2;

/* Move the widget 4 cells in the x direction
offset-x: 4;
/* Move the widget -3 cells in the y direction
offset-y: -3;
```

----------------------------------------

TITLE: Setting Scrollbar Background Color in Python
DESCRIPTION: This snippet shows how to set the background color of a scrollbar using Python in Textual. The color is set to blue for a widget's scrollbar.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.scrollbar_background = "blue"
```

----------------------------------------

TITLE: Python Text Wrap Style Setting
DESCRIPTION: Demonstrates how to set text wrapping behavior programmatically in Python using Textual's style API.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_wrap.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.text_wrap = "wrap"
widget.styles.text_wrap = "nowrap"
```

----------------------------------------

TITLE: Displaying Textual CLI Help
DESCRIPTION: Shows how to display the help information for the Textual command-line interface.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
textual --help
```

----------------------------------------

TITLE: Styling a Widget with an ID Selector
DESCRIPTION: This CSS code styles the widget with the ID "next" by drawing a red outline around it. The ID selector starts with a hash (`#`).
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_8

LANGUAGE: css
CODE:
```
#next {
  outline: red;
}
```

----------------------------------------

TITLE: Adding Textual Dependency
DESCRIPTION: Adds Textual as a dependency to the `pyproject.toml` file, specifying a specific version (0.47.1 in this example).
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/package-with-hatch.md#_snippet_6

LANGUAGE: TOML
CODE:
```
dependencies = ["textual==0.47.1"]
```

----------------------------------------

TITLE: Simulating Key Presses in Snapshot Test for Textual App
DESCRIPTION: This snippet shows how to simulate pressing keys before capturing the snapshot using the press parameter in the snap_compare function.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/testing.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
def test_calculator_pressing_numbers(snap_compare):
    assert snap_compare("path/to/calculator.py", press=["1", "2", "3"])
```

----------------------------------------

TITLE: Using Variables in Markup Safely
DESCRIPTION: Demonstrates safe variable substitution in markup using Content.from_markup
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_15

LANGUAGE: python
CODE:
```
return Content.from_markup("hello [bold]$name[/bold]!", name=name)
```

----------------------------------------

TITLE: Basic Content Alignment Example - Python
DESCRIPTION: Python script demonstrating basic content alignment with three vertically stacked labels.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/content_align.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/content_align.py"
```

----------------------------------------

TITLE: Removing a Column below Cursor in DataTable with Textual (Python)
DESCRIPTION: This code example shows how to delete the column currently under the cursor in a DataTable by mapping cursor_coordinate to a column key using coordinate_to_cell_key, and then calling remove_column. Requires an initialized DataTable widget and a valid cursor position over the desired column. This approach enables dynamic column removal based on current user context in the interactive UI.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
```python\n# Get the keys for the row and column under the cursor.\n_, column_key = table.coordinate_to_cell_key(table.cursor_coordinate)\n# Supply the column key to `column_row` to delete the column.\ntable.remove_column(column_key)\n```
```

----------------------------------------

TITLE: Basic Python Visibility Control
DESCRIPTION: Shows how to control widget visibility using Python styles property.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/visibility.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
# Widget is invisible
self.styles.visibility = "hidden"

# Widget is visible
self.styles.visibility = "visible"
```

----------------------------------------

TITLE: Querying Widgets by Type in Textual
DESCRIPTION: Demonstrates how to use the query method with a selector to find all widgets of a specific type.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
for button in self.query("Button"):
    print(button)
```

----------------------------------------

TITLE: Filtered DirectoryTree Implementation
DESCRIPTION: Example showing how to implement a filtered DirectoryTree that excludes hidden files and directories by customizing the filter_paths method.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/directory_tree.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/directory_tree_filtered.py"
```

----------------------------------------

TITLE: Implementing Scrollbar Gutter in Python with Textual
DESCRIPTION: Shows how to set the scrollbar-gutter style in Python using Textual. It demonstrates setting both 'auto' and 'stable' values.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_gutter.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/scrollbar_gutter.py"
```

----------------------------------------

TITLE: Comprehensive Border Types CSS Styling
DESCRIPTION: CSS configuration for displaying all border types example.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border.md#2025-04-22_snippet_4

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/border_all.tcss"
```

----------------------------------------

TITLE: Styling Border and Outline in CSS for Textual
DESCRIPTION: This CSS file defines styles for the labels in the Textual app, highlighting the differences between border and outline. It sets specific styles for border, outline, and a combination of both to demonstrate their visual effects.
SOURCE: https://github.com/textualize/textual/blob/main/docs/snippets/border_vs_outline_example.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/outline_vs_border.tcss"
```

----------------------------------------

TITLE: Decreasing Console Verbosity
DESCRIPTION: Shows how to decrease the verbosity of the Textual debug console by excluding specific message groups.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/devtools.md#2025-04-22_snippet_13

LANGUAGE: bash
CODE:
```
textual console -x SYSTEM -x EVENT -x DEBUG -x INFO
```

----------------------------------------

TITLE: Example Textual App Demonstrating Scrollbar Styles
DESCRIPTION: A complete Textual application example showcasing various scrollbar styles, including scrollbar-background-hover.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background_hover.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/scrollbars2.py"
```

----------------------------------------

TITLE: Typed Query Results in Textual
DESCRIPTION: Demonstrates how to use the results method to iterate over query results with a specific type, which is useful for type checking.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
for button in self.query(".disabled").results(Button):
    print(button)
```

----------------------------------------

TITLE: Setting Padding for Textual Toast Widgets using CSS
DESCRIPTION: This SCSS snippet demonstrates how to apply padding to all Toast widgets by targeting the `Toast` CSS type selector. This rule sets the padding on all sides of the toast notification to 3 cells.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/toast.md#2025-04-22_snippet_0

LANGUAGE: scss
CODE:
```
Toast {
    padding: 3;
}
```

----------------------------------------

TITLE: Preventing Message Sending in Python for Textual
DESCRIPTION: This code snippet shows how to temporarily disable posting of messages of a particular type using the prevent context manager in Textual. It's used in a Clear button that sets an input's value without triggering a Changed event.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
def on_button_pressed(self) -> None:
    with self.input.prevent(Input.Changed):
        self.input.value = ""

def on_input_changed(self) -> None:
    self.bell()
```

----------------------------------------

TITLE: Applying Background Tint to Focused Widget in CSS
DESCRIPTION: This snippet demonstrates how to use the background-tint style to subtly change the background of a focused widget, making it slightly lighter.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/background_tint.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
MyWidget:focus {
    background-tint: white 10%
}
```

----------------------------------------

TITLE: Creating an Option List with Strings in Textual
DESCRIPTION: This Python code snippet shows how to create an OptionList widget in Textual, populated with string items. It demonstrates the basic usage of the new OptionList feature introduced in Textual 0.17.0.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-17-0.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
```{.textual path="docs/examples/widgets/option_list_strings.py"}
```
```

----------------------------------------

TITLE: Setting Header Text via App Attributes (Python)
DESCRIPTION: Provides the Python source code demonstrating how to customize the text displayed in the Header widget. It sets the `title` and `sub_title` class variables on the Textual `App`, which are then automatically picked up by the Header.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/header.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
```python
--8<-- "docs/examples/widgets/header_app_title.py"
```
```

----------------------------------------

TITLE: Enabling Syntax Highlighting in TextArea
DESCRIPTION: Demonstrates how to enable syntax highlighting for a specific programming language in the TextArea widget.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/text-area-learnings.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
yield TextArea(language="python")
```

----------------------------------------

TITLE: Grid Column TCSS Styling
DESCRIPTION: CSS styling for grid columns with highlighted line showing column configuration.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_columns.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/grid_columns.tcss"
```

----------------------------------------

TITLE: CSS Tint Style Definition
DESCRIPTION: Basic CSS syntax for the tint style property that blends a color with a widget. Shows format for color values and optional percentage.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/tint.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
tint: <color> [<percentage>];
```

----------------------------------------

TITLE: Customizing Tooltip Style with CSS
DESCRIPTION: This example shows how to customize the appearance of tooltips using CSS. It targets the Tooltip class in CSS to modify the background color, border, and text style.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_17

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Header, Footer, Button


class TooltipApp(App):
    
```

----------------------------------------

TITLE: Implementing Custom Scrollbar Colors in Textual Python
DESCRIPTION: This Python script creates a Textual application with two panels demonstrating custom scrollbar colors. It imports necessary modules, defines the app structure, and sets up the content for comparison between default and custom scrollbar styles.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/index.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/scrollbars.py"
```

----------------------------------------

TITLE: Configuring Initial Collapsed State (Python)
DESCRIPTION: Demonstrates setting the initial state of `Collapsible` widgets using the `collapsed` boolean parameter in the constructor. `collapsed=False` makes the widget initially expanded, while `collapsed=True` (the default) makes it initially collapsed.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/collapsible.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
```python
def compose(self) -> ComposeResult:
    with Collapsible(title="Contents 1", collapsed=False):
        yield Label("Hello, world.")

    with Collapsible(title="Contents 2", collapsed=True):  # Default.
        yield Label("Hello, world.")
```
```

----------------------------------------

TITLE: Setting Scrollbar Corner Color in Textual CSS
DESCRIPTION: Example of setting the scrollbar corner color to white using CSS in Textual.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_corner_color.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
scrollbar-corner-color: white;
```

----------------------------------------

TITLE: Defining Scrollbar Color in CSS
DESCRIPTION: Sets the color of the scrollbar using CSS syntax. The color can be specified as a named color or any valid CSS color value.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
scrollbar-color: cyan;
```

----------------------------------------

TITLE: System Exit with Return Code
DESCRIPTION: Shows how to properly exit a Textual application with a return code using sys.exit().
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/app.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
if __name__ == "__main__"
    app = MyApp()
    app.run()
    import sys
    sys.exit(app.return_code or 0)
```

----------------------------------------

TITLE: Setting Overflow in Python for Textual Widgets
DESCRIPTION: This example shows how to set the vertical overflow property of a widget to hidden using Python code, preventing content from overflowing vertically.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/overflow.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.overflow_y = "hidden"  # Don't overflow
```

----------------------------------------

TITLE: Implementing Pause and Resume for Rich Renderables in Textual (Python)
DESCRIPTION: This snippet shows an attempt to implement pause and resume functionality for Rich renderables (spinners and progress bars) in a Textual app. It includes button controls and event handling for pausing and resuming animations.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/spinners-and-pbs-in-textual.md#2025-04-22_snippet_6

LANGUAGE: python
CODE:
```
from rich.progress import Progress, BarColumn
from rich.spinner import Spinner

from textual.app import App, ComposeResult, RenderableType
from textual.containers import Grid, Horizontal, Vertical
from textual.widgets import Button, Static


class IntervalUpdater(Static):
    _renderable_object: RenderableType

    def update_rendering(self) -> None:
        self.update(self._renderable_object)

    def on_mount(self) -> None:
        self.interval_update = self.set_interval(1 / 60, self.update_rendering)

    def pause(self) -> None:  # (1)!
        self.interval_update.pause()

    def resume(self) -> None:  # (2)!
        self.interval_update.resume()


class IndeterminateProgressBar(IntervalUpdater):
    """Basic indeterminate progress bar widget based on rich.progress.Progress."""
    def __init__(self) -> None:
        super().__init__("")
        self._renderable_object = Progress(BarColumn())
        self._renderable_object.add_task("", total=None)


class SpinnerWidget(IntervalUpdater):
    """Basic spinner widget based on rich.spinner.Spinner."""
    def __init__(self, style: str) -> None:
        super().__init__("")
        self._renderable_object = Spinner(style)


class LiveDisplayApp(App[None]):
    """App showcasing some widgets that update regularly."""
    CSS_PATH = "myapp.css"

    def compose(self) -> ComposeResult:
        yield Vertical(
                Grid(
                    SpinnerWidget("moon"),
                    IndeterminateProgressBar(),
                    SpinnerWidget("aesthetic"),
                    SpinnerWidget("bouncingBar"),
                    SpinnerWidget("earth"),
                    SpinnerWidget("dots8Bit"),
                ),
                Horizontal(
                    Button("Pause", id="pause"),  # (3)!
                    Button("Resume", id="resume", disabled=True),
                ),
        )

    def on_button_pressed(self, event: Button.Pressed) -> None:  # (4)!
        pressed_id = event.button.id
        assert pressed_id is not None
        for widget in self.query(IntervalUpdater):
            getattr(widget, pressed_id)()  # (5)!

        for button in self.query(Button):  # (6)!
            if button.id == pressed_id:
                button.disabled = True
            else:
                button.disabled = False


LiveDisplayApp().run()
```

----------------------------------------

TITLE: Example of Layers Usage in Textual CSS
DESCRIPTION: A Textual CSS file showing how to define and apply layers to widgets. It sets up two layers and applies them to different boxes.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layers.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/layout/layers.tcss"
```

----------------------------------------

TITLE: Creating OptionList with Option Instances in Python
DESCRIPTION: Example showing how to use Option class instances and Separator for more control over options
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/option_list.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/widgets/option_list_options.py"
```

----------------------------------------

TITLE: Setting Scrollbar Background Active Color - CSS Syntax
DESCRIPTION: Defines the syntax for setting the background color of a scrollbar when active. Accepts a color value with optional opacity percentage.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background_active.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
scrollbar-background-active: <color> [<percentage>];
```

----------------------------------------

TITLE: Defining Scrollbar Background Hover Color in CSS
DESCRIPTION: Sets the background color of a scrollbar to purple when the cursor hovers over it. This style accepts a color value with an optional opacity percentage.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background_hover.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
scrollbar-background-hover: purple;
```

----------------------------------------

TITLE: Styling Dictionary App with CSS in Textual
DESCRIPTION: CSS styles for a dictionary application in Textual.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_9

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/events/dictionary.tcss"
```

----------------------------------------

TITLE: Resetting Button Background to Initial Value
DESCRIPTION: This CSS rule resets the background color of buttons within a widget with the class 'dialog' to their initial (default) value. It uses the `initial` keyword to revert to the default styling.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_24

LANGUAGE: css
CODE:
```
.dialog Button {
  background: initial;
}
```

----------------------------------------

TITLE: Setting link_background_hover in Python for Textual
DESCRIPTION: Examples of setting the link_background_hover style in Python for Textual widgets. It shows how to use string color values and a Color object directly.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_background_hover.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.link_background_hover = "red 70%"
widget.styles.link_background_hover = "$accent"

# You can also use a `Color` object directly:
widget.styles.link_background_hover = Color(100, 30, 173)
```

----------------------------------------

TITLE: Registering a Custom Theme with TextArea in Python
DESCRIPTION: Shows how to register a previously defined custom theme (`my_theme`) with an instance of the `TextArea` widget (`text_area`) using the `register_theme` method.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_11

LANGUAGE: python
CODE:
```
text_area.register_theme(my_theme)
```

----------------------------------------

TITLE: Validating Reactive Attribute Values in Textual (CSS)
DESCRIPTION: This CSS styles the Textual application for the validation example.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_9

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/guide/reactivity/validate01.tcss"
```

----------------------------------------

TITLE: CSS Selector for VerticalScroll Children
DESCRIPTION: This CSS rule targets all children of a `VerticalScroll` widget and sets their background to red. It demonstrates the use of a combinator (space) to select descendant widgets.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_14

LANGUAGE: css
CODE:
```
VerticalScroll * {
  background: red;
}
```

----------------------------------------

TITLE: Styling Border Title and Subtitle Alignments with CSS in Textual
DESCRIPTION: This CSS code defines styles for border title and subtitle alignments in Textual. It includes rules for default alignments, handling long titles, and positioning based on border settings and padding.
SOURCE: https://github.com/textualize/textual/blob/main/docs/snippets/border_sub_title_align_all_example.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/border_sub_title_align_all.tcss"
```

----------------------------------------

TITLE: Overflow Example CSS for Textual
DESCRIPTION: CSS styles accompanying the Python example, demonstrating how to set overflow styles for different containers in a Textual application.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/overflow.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/overflow.tcss"
```

----------------------------------------

TITLE: Demonstrating Layer Usage in Textual Python
DESCRIPTION: Example Python script demonstrating the use of layers in Textual. It creates two boxes with different layers, showing how the layer affects the rendering order.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/layer.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/layout/layers.py"
```

----------------------------------------

TITLE: Comprehensive Border Types Python Example
DESCRIPTION: Python implementation showing all available border types in a grid layout.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border.md#2025-04-22_snippet_3

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/border_all.py"
```

----------------------------------------

TITLE: Defining Text Overflow in CSS for Textual
DESCRIPTION: This CSS snippet demonstrates how to set the text-overflow property for a widget in Textual. It uses the 'ellipsis' value, which truncates overflowing text and adds an ellipsis at the end.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/text_overflow.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
#widget {
    text-overflow: ellipsis; 
}
```

----------------------------------------

TITLE: Implementing Horizontal Rules (Python)
DESCRIPTION: This snippet references the Python code located at `docs/examples/widgets/horizontal_rules.py`. This external file contains the actual implementation demonstrating how to create and display various horizontal `Rule` widgets using the Textual framework.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/rule.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
    ```python
    --8<-- "docs/examples/widgets/horizontal_rules.py"
    ```
```

----------------------------------------

TITLE: Setting link-style in Python for Textual Action Links
DESCRIPTION: Examples of setting the 'link_style' property in Python to style Textual action links with different text styles.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/links/link_style.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
widget.styles.link_style = "bold"
widget.styles.link_style = "bold italic reverse"
```

----------------------------------------

TITLE: Styling a Select Widget with CSS in Textual
DESCRIPTION: CSS styling for the Select widget in Textual. The snippet shows how to customize the appearance of the Select control.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/release0-24-0.md#2025-04-22_snippet_1

LANGUAGE: sass
CODE:
```
--8<-- "docs/examples/widgets/select.css"
```

----------------------------------------

TITLE: Styling Sparkline Widgets With Different Functions Using CSS in Textual
DESCRIPTION: Sets the width and styling for Sparkline widgets used when demonstrating different summary functions. The CSS file determines how multiple Sparkline widgets with differing summary settings are laid out and displayed. Requires association with the corresponding Python file running sparklines with various summary functions. Modifies widget look and size based on selectors and potentially class-based rules.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/sparkline.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
```
--8<-- \"docs/examples/widgets/sparkline.tcss\"
```
```

----------------------------------------

TITLE: Styling ContentSwitcher Interface with TCSS
DESCRIPTION: CSS styling rules for the ContentSwitcher widget interface using Textual's CSS-like styling system (TCSS).
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/content_switcher.md#2025-04-22_snippet_1

LANGUAGE: sass
CODE:
```
--8<-- "docs/examples/widgets/content_switcher.tcss"
```

----------------------------------------

TITLE: Scrollbar Color Styling in TCSS
DESCRIPTION: A TCSS (Textual CSS) file that defines custom scrollbar colors for a Textual application. It sets various scrollbar-related styles, including the scrollbar color.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_color.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
ScrollableContainer {
    height: 100%;
    border: solid green;
}
ScrollableContainer > Static {
    width: auto;
    height: auto;
}
Screen {
    scrollbar-color: $primary;
    scrollbar-color-hover: $secondary;
    scrollbar-color-active: $warning;
    scrollbar-background: $panel;
    scrollbar-background-hover: $boost;
    scrollbar-background-active: $boost;
    scrollbar-size: 2 1;
    scrollbar-size-horizontal: 1;
}
```

----------------------------------------

TITLE: CSS Rule for Error and Disabled Classes
DESCRIPTION: This CSS rule targets widgets that have both the 'error' and 'disabled' classes applied. It sets their background to dark red.  Class selectors are chained together with a full stop (`.`) to match widgets with all specified classes.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_12

LANGUAGE: css
CODE:
```
.error.disabled {
  background: darkred;
}
```

----------------------------------------

TITLE: Progress Bar Styling - CSS
DESCRIPTION: CSS styles for customizing the progress bar appearance in the funding tracker example.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/progress_bar.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/widgets/progress_bar.tcss"
```

----------------------------------------

TITLE: Setting Scrollbar Background Color in CSS
DESCRIPTION: This snippet demonstrates how to set the background color of a scrollbar using CSS in Textual. The color is set to blue in this example.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
scrollbar-background: blue;
```

----------------------------------------

TITLE: Implementing Mouse Movement Tracking in Python with Textual
DESCRIPTION: Example demonstrating how to track mouse movements and attach a widget to the mouse cursor position. The code shows the implementation of mouse event handling including mouse capture initialization.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/input.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
title="mouse01.py" hl_lines="17-19"
--8<-- "docs/examples/guide/input/mouse01.py"
```

----------------------------------------

TITLE: Color Class Usage Examples in Python
DESCRIPTION: Demonstrates the capabilities of Textual's Color class including color parsing, manipulation, and format conversion. Shows operations like darkening, alpha compositing, and color space conversions.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/steal-this-code.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
>>> from textual.color import Color
>>> color = Color.parse("lime")
>>> color
Color(0, 255, 0, a=1.0)
>>> color.darken(0.8)
Color(0, 45, 0, a=1.0)
>>> color + Color.parse("red").with_alpha(0.1)
Color(25, 229, 0, a=1.0)
>>> color = Color.parse("#12a30a")
>>> color
Color(18, 163, 10, a=1.0)
>>> color.css
'rgb(18,163,10)'
>>> color.hex
'#12A30A'
>>> color.monochrome
Color(121, 121, 121, a=1.0)
>>> color.monochrome.hex
'#797979'
>>> color.hsl
HSL(h=0.3246187363834423, s=0.8843930635838151, l=0.33921568627450976)
>>>
```

----------------------------------------

TITLE: Implementing Awaitable Mount Operation in Python
DESCRIPTION: Shows how to implement an awaitable object for mounting widgets in the Textual framework. The AwaitMount class allows optional awaiting of widget mounting operations.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/await-me-maybe.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
class AwaitMount:
    """An awaitable returned by mount() and mount_all()."""

    def __init__(self, parent: Widget, widgets: Sequence[Widget]) -> None:
        self._parent = parent
        self._widgets = widgets

    async def __call__(self) -> None:
        """Allows awaiting via a call operation."""
        await self

    def __await__(self) -> Generator[None, None, None]:
        async def await_mount() -> None:
            if self._widgets:
                aws = [
                    create_task(widget._mounted_event.wait(), name="await mount")
                    for widget in self._widgets
                ]
                if aws:
                    await wait(aws)
                    self._parent.refresh(layout=True)

        return await_mount().__await__()
```

----------------------------------------

TITLE: CSS Universal Selector
DESCRIPTION: This CSS rule uses the universal selector (*) to target all widgets and apply a red outline.  It demonstrates how to style every widget in the application.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/CSS.md#_snippet_13

LANGUAGE: css
CODE:
```
* {
  outline: solid red;
}
```

----------------------------------------

TITLE: Width Comparison Example - CSS
DESCRIPTION: CSS code demonstrating various width units and measurements.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/width.md#2025-04-22_snippet_4

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/width_comparison.tcss"
```

----------------------------------------

TITLE: Dynamically Watching Reactive Attributes in Textual (Python)
DESCRIPTION: This example demonstrates how to dynamically add watchers to reactive attributes using the `watch` method.  This allows reacting to changes in reactive attributes for which you can't edit the watch methods directly. The app watches the `counter` attribute of a `Counter` widget and updates a progress bar accordingly.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_12

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/reactivity/dynamic_watch.py"
```

----------------------------------------

TITLE: Running a Textual Clock App Inline
DESCRIPTION: This snippet demonstrates how to create a simple clock app in Textual and run it inline. The app displays the current time and updates it continuously.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/style-inline-apps.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static
from textual.containers import Center
from datetime import datetime


class ClockApp(App):
    def compose(self) -> ComposeResult:
        yield Center(Static(datetime.now().time().strftime("%H:%M:%S")))

    def on_mount(self) -> None:
        self.update_time()

    def update_time(self) -> None:
        clock = self.query_one(Static)
        time = datetime.now().time()
        clock.update(time.strftime("%H:%M:%S"))
        self.set_timer(1, self.update_time)


if __name__ == "__main__":
    app = ClockApp()
    app.run(inline=True)
```

----------------------------------------

TITLE: Demonstrating and Using a Textual Switch Widget (Python)
DESCRIPTION: This snippet refers to an example implementation of the Switch widget using the Textual Python framework. It demonstrates how to create and display various states of a Switch in a Textual app. Requires the Textual library and proper configuration of the example file. Major parameters include the instantiation and state management of the switch; output is visual representation and interactive toggling. The code leverages Python's object-oriented features for UI composition, typically run as a standalone script.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/switch.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- \"docs/examples/widgets/switch.py\"
```

----------------------------------------

TITLE: Implementing Basic Outline Example in Python
DESCRIPTION: Example showing basic implementation of outline styling in a Textual application
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/outline.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/outline.py"
```

----------------------------------------

TITLE: Border Styles CSS Configuration
DESCRIPTION: CSS styling configuration for the border examples with highlighted important lines.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/border.md#2025-04-22_snippet_2

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/border.tcss"
```

----------------------------------------

TITLE: Implementing Border Title and Subtitle Alignments in Python with Textual
DESCRIPTION: This Python code demonstrates various border title and subtitle alignments using Textual. It shows how to create labels with custom markup, handle long titles, and apply different alignment styles.
SOURCE: https://github.com/textualize/textual/blob/main/docs/snippets/border_sub_title_align_all_example.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/styles/border_sub_title_align_all.py"
```

----------------------------------------

TITLE: Setting Hatch Styles Programmatically in Python with Textual
DESCRIPTION: Demonstrates how to set hatch styles programmatically using Python in a Textual application. It shows examples of applying cross hatch, diagonal hatch, and custom character hatch with different colors.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/hatch.md#2025-04-22_snippet_4

LANGUAGE: python
CODE:
```
widget.styles.hatch = ("cross", "red")
widget.styles.hatch = ("right", "rgba(0,255,0,128)")
widget.styles.hatch = ("T", "blue")
```

----------------------------------------

TITLE: Querying the Last Widget of a Type in Textual
DESCRIPTION: Shows how to use the last method on a query object to get the last widget of a specific type, with type checking.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/queries.md#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
last_button = self.query("Button").last()

disabled_button = self.query(".disabled").last(Button)
```

----------------------------------------

TITLE: Grid Size Columns Only Example
DESCRIPTION: CSS implementation showing a grid with only columns specified, allowing rows to be computed automatically
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/grid/grid_size.md#2025-04-22_snippet_3

LANGUAGE: css
CODE:
```
Screen {
    grid-size: 2;
}
```

----------------------------------------

TITLE: Styling LoadingIndicator Color with CSS
DESCRIPTION: CSS example showing how to customize the color of the LoadingIndicator widget using CSS styling.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/loading_indicator.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
LoadingIndicator {
    color: red;
}
```

----------------------------------------

TITLE: Styling Sparkline Widget Colors Using CSS in Textual
DESCRIPTION: Defines CSS rules for component classes that set the colors of individual Sparkline widgets. The stylesheet is meant to be paired with the corresponding Python code where classes are assigned to the widgets. Requires correct linkage of the CSS file in the Textual app and proper use of defined classes in Python. Controls the final appearance of sparkline bars, enabling themes and custom color highlights.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/sparkline.md#2025-04-22_snippet_5

LANGUAGE: css
CODE:
```
```
--8<-- \"docs/examples/widgets/sparkline_colors.tcss\"
```
```

----------------------------------------

TITLE: Disabling Command Palette in Textual App
DESCRIPTION: Demonstrates how to disable the command palette functionality in a Textual app by setting the ENABLE_COMMAND_PALETTE class variable to False.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/command_palette.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
class NoPaletteApp(App):
    ENABLE_COMMAND_PALETTE = False
```

----------------------------------------

TITLE: Setting Overflow in CSS for Textual Widgets
DESCRIPTION: This example demonstrates how to set the vertical overflow property of a container widget to hidden, preventing content from overflowing vertically.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/overflow.md#2025-04-22_snippet_0

LANGUAGE: css
CODE:
```
#container {
    overflow-y: hidden;  /* Don't overflow */
}
```

----------------------------------------

TITLE: Styling OptionList with CSS
DESCRIPTION: CSS styling rules for the OptionList widget appearance
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/option_list.md#2025-04-22_snippet_1

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/widgets/option_list.tcss"
```

----------------------------------------

TITLE: Running Textual Demo without Installation using uv
DESCRIPTION: This command demonstrates how to run the Textual demo without installing it, using the uv package manager. It requires uv to be installed on the system.
SOURCE: https://github.com/textualize/textual/blob/main/README.md#2025-04-22_snippet_3

LANGUAGE: bash
CODE:
```
uvx --python 3.12 textual-demo
```

----------------------------------------

TITLE: Styling Content Programmatically
DESCRIPTION: Shows how to apply styles to Content using the stylize method
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/content.md#2025-04-22_snippet_14

LANGUAGE: python
CODE:
```
content = Content("Hello, World!")
content = content.stylize(7, 12, "bold")
```

----------------------------------------

TITLE: FizzBuzz App CSS Styling
DESCRIPTION: This CSS styles the FizzBuzz app, setting the background color and defining styles for the FizzBuzz widget. It includes styles for dark mode and table elements.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/widgets.md#_snippet_14

LANGUAGE: css
CODE:
```
FizzBuzz {
    layout: center;
    height: 1fr;
}

Table {
    width: auto;
}

Table.-dark {
    background: $panel;
}

Table > Row:nth-child(odd) {
    background: $boost;
}

Table > Row:nth-child(even) {
    background: $panel;
}

Table.-dark > Row:nth-child(odd) {
    background: $panel;
}

Table.-dark > Row:nth-child(even) {
    background: $boost;
}

/* Remove borders */

Table > Row > Cell {
    border: tall $primary;
}

Table.-dark > Row > Cell {
    border: tall $secondary;
}

/* Remove headers */
Table > Header {
    display: none;
}

/* Add padding */
Table > Row > Cell {
    padding: 0 1;
}

Table {
    width: auto;
    height: auto;
    border: tall $primary;
    background: $panel;
}
```

----------------------------------------

TITLE: Custom Progress Bar Styles - CSS
DESCRIPTION: CSS styling rules for customizing the appearance of the progress bar components.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/progress_bar.md#2025-04-22_snippet_5

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/widgets/progress_bar_styled.tcss"
```

----------------------------------------

TITLE: Python Tint Implementation
DESCRIPTION: Examples of programmatically setting tint styles in Python using both Color class parsing and direct RGBA string values.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/tint.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
# A red tint
from textual.color import Color
widget.styles.tint = Color.parse("red").with_alpha(0.2);

# A green tint
widget.styles.tint = "rgba(0, 200, 0, 0.3)"
```

----------------------------------------

TITLE: Installing textual-web for Memray Integration
DESCRIPTION: Command to install textual-web using pipx, which will be used to serve the Memray interface remotely.
SOURCE: https://github.com/textualize/textual/blob/main/docs/blog/posts/remote-memray.md#2025-04-22_snippet_0

LANGUAGE: bash
CODE:
```
pipx install textual-web
```

----------------------------------------

TITLE: Styling Textual Toasts Based on Severity Level using CSS Classes
DESCRIPTION: This SCSS snippet provides CSS rule placeholders for styling Toast widgets based on their severity level. It targets the `-information`, `-warning`, and `-error` classes, allowing developers to apply different styles (e.g., background colors, borders) for each type of notification.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/toast.md#2025-04-22_snippet_2

LANGUAGE: scss
CODE:
```
Toast.-information {
    /* Styling here. */
}

Toast.-warning {
    /* Styling here. */
}

Toast.-error {
    /* Styling here. */
}
```

----------------------------------------

TITLE: Setting Overflow Style Programmatically in Python for Textual
DESCRIPTION: Python code demonstrating how to set overflow styles programmatically in Textual. It shows setting overflow for individual axes.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/overflow.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
# Hide the vertical scrollbar
widget.styles.overflow_y = "hidden"

# Always show the horizontal scrollbar
widget.styles.overflow_x = "scroll"
```

----------------------------------------

TITLE: Applying Auto Color in Textual CSS
DESCRIPTION: Demonstrates the use of 'auto' color in Textual CSS to automatically select text color for optimal contrast.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/color.md#2025-04-22_snippet_4

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/styles/color_auto.tcss"
```

----------------------------------------

TITLE: Setting Background Tint in Python
DESCRIPTION: This snippet demonstrates how to set the background tint using Python, both with a string syntax similar to CSS and with a Color object for more precise control.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/background_tint.md#2025-04-22_snippet_2

LANGUAGE: python
CODE:
```
# Set 20% blue background tint
widget.styles.background_tint = "blue 20%"

from textual.color import Color
# Set with a color object
widget.styles.background_tint = Color(120, 60, 100, 0.5)
```

----------------------------------------

TITLE: Styling Buttons with CSS in Textual
DESCRIPTION: CSS styles for buttons in a Textual application.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/events.md#2025-04-22_snippet_4

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/events/on_decorator.tcss"
```

----------------------------------------

TITLE: Styling DataTable Cells with Rich Renderables in Textual (Python)
DESCRIPTION: This code example shows how to use Rich Text renderables (such as Text) to style and justify DataTable cell content. By assigning styled Rich objects instead of plain strings, developers can customize cell appearance with color, boldness, alignment, etc. Dependencies include both Textual and Rich libraries, and you must ensure your DataTable cell values are Rich renderables. This allows enhanced cell presentation in terminal UIs, though you must manage Rich objects for advanced formatting.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/data_table.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
```python\n--8<-- \"docs/examples/widgets/data_table_renderables.py\"\n```
```

----------------------------------------

TITLE: Centering Multiple Widgets Individually in Textual using `Center` Container (Python)
DESCRIPTION: This Python snippet shows how to center multiple `Button` widgets independently within a Textual `Screen`. Each `Button` is wrapped in a `textual.containers.Center` container within the `compose` method. Although the parent `Screen` still uses `align: center middle;` to stack the `Center` containers vertically in the middle, each `Center` container ensures its child `Button` is horizontally centered within its own allocated space.
SOURCE: https://github.com/textualize/textual/blob/main/questions/align-center-middle.question.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.containers import Center
from textual.widgets import Button

class ButtonApp(App):

    CSS = """
    Screen {
        align: center middle;
    }
    """

    def compose(self) -> ComposeResult:
        yield Center(Button("PUSH ME!"))
        yield Center(Button("AND ME!"))
        yield Center(Button("ALSO PLEASE PUSH ME!"))
        yield Center(Button("HEY ME ALSO!!"))

if __name__ == "__main__":
    ButtonApp().run()
```

----------------------------------------

TITLE: Importing Dependencies to Define a Custom TextAreaTheme - Python
DESCRIPTION: Imports the required classes for constructing a custom syntax highlighting theme for the TextArea widget. 'Style' is used for color and attribute definitions (from 'rich.style'), while 'TextAreaTheme' enables registering and applying custom themes (from 'textual.widgets.text_area'). Should be placed at the top of a Python script that defines new visual themes for TextArea.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/text_area.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
from rich.style import Style\nfrom textual.widgets.text_area import TextAreaTheme
```

----------------------------------------

TITLE: Importing and Using AwaitRemove in Python with Textual
DESCRIPTION: This snippet demonstrates how to use the AwaitRemove object returned by Widget.remove(). It can be awaited to ensure the widget has been fully removed before proceeding with further operations.
SOURCE: https://github.com/textualize/textual/blob/main/docs/api/await_remove.md#2025-04-22_snippet_0

LANGUAGE: python
CODE:
```
from textual.widget import Widget

async def remove_widget(widget: Widget):
    await_remove = widget.remove()
    # You can await the AwaitRemove object if needed
    await await_remove
    # At this point, the widget is guaranteed to be removed
    print("Widget removed successfully")
```

----------------------------------------

TITLE: ProgressBar Widget Implementation in Textual
DESCRIPTION: Demonstrates a configurable progress bar with ETA and completion percentage.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widget_gallery.md#2025-04-22_snippet_18

LANGUAGE: textual
CODE:
```
docs/examples/widgets/progress_bar.py
```

----------------------------------------

TITLE: Styling a Textual Clock App for Inline Mode
DESCRIPTION: This snippet shows how to modify the appearance of a Textual clock app when running inline. It demonstrates the use of CSS with the :inline pseudo-selector to adjust the height, remove the border, and change the color of the clock.
SOURCE: https://github.com/textualize/textual/blob/main/docs/how-to/style-inline-apps.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Static
from textual.containers import Center
from datetime import datetime


class ClockApp(App):
    CSS = """
    Screen:inline {
        height: 3
        border: none
    }

    Static:inline {
        color: $accent
    }
    """

    def compose(self) -> ComposeResult:
        yield Center(Static(datetime.now().time().strftime("%H:%M:%S")))

    def on_mount(self) -> None:
        self.update_time()

    def update_time(self) -> None:
        clock = self.query_one(Static)
        time = datetime.now().time()
        clock.update(time.strftime("%H:%M:%S"))
        self.set_timer(1, self.update_time)


if __name__ == "__main__":
    app = ClockApp()
    app.run(inline=True)
```

----------------------------------------

TITLE: Setting Integer Values in Python for Textual Widgets
DESCRIPTION: Demonstrates how to set CSS properties that expect integer values using Python code. This example shows setting the 'offset' property of a widget to a tuple of integers.
SOURCE: https://github.com/textualize/textual/blob/main/docs/css_types/integer.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.offset = (10, -20)
```

----------------------------------------

TITLE: Setting Reactive Attribute with set_reactive
DESCRIPTION: This example demonstrates how to use `set_reactive` to set a reactive attribute without immediately invoking the watcher. This is useful during initialization or when you want to avoid triggering updates prematurely. The `set_reactive` method accepts the reactive attribute (as a class variable) and the new value.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/reactivity.md#_snippet_20

LANGUAGE: python
CODE:
```
from textual.app import App, ComposeResult
from textual.widgets import Label
from textual.reactive import reactive

class Greeter(Label):

    DEFAULT_CSS = """
    Greeter {
        width: auto;
        height: auto;
        padding: 1 2;
        border: tall $primary;
    }
    """

    greeting: reactive[str] = reactive("Hello, World!")

    def watch_greeting(self, greeting: str) -> None:
        self.update(greeting)

    def on_mount(self) -> None:
        greeting = "Goodbye, World!"
        self.set_reactive(Greeter.greeting, greeting)

class ReactiveBugApp(App):

    CSS = """
    Screen {
        layout: vertical;
        align: center middle;
    }
    """

    def compose(self) -> ComposeResult:
        yield Greeter()

if __name__ == "__main__":
    app = ReactiveBugApp()
    app.run()
```

----------------------------------------

TITLE: Styling Textual Toast Title for Information Severity using CSS
DESCRIPTION: This SCSS snippet demonstrates how to style the title component within a specific type of Toast. It targets the `.toast--title` class within a `Toast` that also has the `-information` class, setting the `text-style` to `italic` specifically for the titles of information-level toasts.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/toast.md#2025-04-22_snippet_3

LANGUAGE: scss
CODE:
```
Toast.-information .toast--title {
    text-style: italic;
}

```

----------------------------------------

TITLE: Setting Scrollbar Background Hover Color in Python
DESCRIPTION: Programmatically sets the background color of a scrollbar to purple when hovered over using Textual's Python API.
SOURCE: https://github.com/textualize/textual/blob/main/docs/styles/scrollbar_colors/scrollbar_background_hover.md#2025-04-22_snippet_1

LANGUAGE: python
CODE:
```
widget.styles.scrollbar_background_hover = "purple"
```

----------------------------------------

TITLE: Row and Column Spanning in Textual
DESCRIPTION: Demonstrates combining row-span and column-span to make a cell occupy multiple rows and columns simultaneously.
SOURCE: https://github.com/textualize/textual/blob/main/docs/guide/layout.md#2025-04-22_snippet_8

LANGUAGE: python
CODE:
```
--8<-- "docs/examples/guide/layout/grid_layout6_row_span.py"
```

LANGUAGE: css
CODE:
```
hl_lines="8"
--8<-- "docs/examples/guide/layout/grid_layout6_row_span.tcss"
```

----------------------------------------

TITLE: Styling Select Widget from Class-Method Example Using CSS (CSS)
DESCRIPTION: Mirroring the generic styling approach, this CSS snippet contains appearance customizations for the Select widget as used in the from_values example. The file docs/examples/widgets/select.tcss is reused for both the basic and class-method examples, ensuring a consistent UI/UX. The CSS must be referenced by the Textual app for styles to apply to the Select widget in the demonstration.
SOURCE: https://github.com/textualize/textual/blob/main/docs/widgets/select.md#2025-04-22_snippet_4

LANGUAGE: css
CODE:
```
--8<-- "docs/examples/widgets/select.tcss"
```